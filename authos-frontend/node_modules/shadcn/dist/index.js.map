{"version":3,"sources":["../src/commands/add.ts","../src/commands/init.ts","../src/preflights/preflight-init.ts","../src/utils/errors.ts","../src/utils/add-components.ts","../src/utils/updaters/update-css-vars.ts","../src/utils/get-package-manager.ts","../src/utils/updaters/update-dependencies.ts","../src/utils/updaters/update-files.ts","../src/utils/transformers/index.ts","../src/utils/transformers/transform-css-vars.ts","../src/utils/icon-libraries.ts","../src/utils/transformers/transform-icons.ts","../src/utils/transformers/transform-import.ts","../src/utils/transformers/transform-jsx.ts","../src/utils/transformers/transform-rsc.ts","../src/utils/transformers/transform-tw-prefix.ts","../src/utils/create-project.ts","../src/utils/updaters/update-tailwind-content.ts","../src/preflights/preflight-add.ts","../src/utils/update-app-index.ts","../src/commands/build.ts","../src/preflights/preflight-build.ts","../src/commands/diff.ts","../src/commands/info.ts","../src/commands/migrate.ts","../src/migrations/migrate-icons.ts","../src/preflights/preflight-migrate.ts","../src/index.ts","../package.json"],"names":["path","fs","MISSING_DIR_OR_EMPTY_PROJECT","MISSING_CONFIG","TAILWIND_NOT_CONFIGURED","IMPORT_ALIAS_MISSING","UNSUPPORTED_FRAMEWORK","BUILD_MISSING_REGISTRY_FILE","preFlightInit","options","errors","projectSpinner","spinner","logger","highlighter","frameworkSpinner","projectInfo","getProjectInfo","tailwindSpinnerMessage","tailwindSpinner","tsConfigSpinner","postcss","AtRule","z","updateCssVars","cssVars","config","cssFilepath","cssFilepathRelative","cssVarsSpinner","raw","output","transformCssVars","input","plugins","updateCssVarsPlugin","cleanupDefaultNextStylesPlugin","packageInfo","getPackageInfo","addCustomImport","addCustomVariant","updateCssVarsPluginV4","updateThemePlugin","updateTailwindConfigPlugin","updateTailwindConfigAnimationPlugin","updateTailwindConfigKeyframesPlugin","updateBaseLayerPlugin","tailwindVersion","root","requiredRules","baseLayer","node","selector","apply","rule","applyRule","key","vars","addOrUpdateVars","removeConflictVars","rootRule","propsToRemove","bodyRule","darkRootRule","ruleNode","value","prop","newDecl","existingDecl","isLocalHSLValue","variables","themeNode","upsertThemeNode","themeVarNodes","variable","radiusVariables","cssVarNode","isColorValue","propValue","params","importNodes","variantNode","lastImport","customVariantNode","importNode","tailwindConfig","quote","getQuoteType","pluginNodes","lastPluginNode","plugin","pluginName","pluginNode","existingKeyFrameNodes","keyframeValueSchema","keyframeName","keyframeValue","parsedKeyframeValue","keyframeNode","values","existingAnimationNodes","parsedAnimationValue","animationNode","chunks","chunk","detect","getPackageManager","targetDir","withFallback","packageManager","userAgent","execa","prompts","updateDependencies","dependencies","dependenciesSpinner","flag","isUsingReact19","confirmation","existsSync","basename","tmpdir","SyntaxKind","sourceFile","baseColor","valueWithColorMapping","applyColorMapping","splitClassName","className","parts","rest","alpha","split","name","variant","PREFIXES","mapping","classNames","lightMode","darkMode","modifier","prefix","needle","ICON_LIBRARIES","SOURCE_LIBRARY","transformIcons","registryIcons","getRegistryIcons","sourceLibrary","targetLibrary","targetedIcons","importDeclaration","specifier","iconName","targetedIcon","iconImportDeclaration","icon","_useSemicolon","transformImport","isRemote","utilsImport","importDeclarations","moduleSpecifier","updateImportAliases","i","alias","transformFromAstSync","parse","transformTypescript","recast","PARSE_OPTIONS","transformJsx","ast","code","result","directiveRegex","transformRsc","first","Project","ScriptKind","transformTwPrefixes","defaultClassNames","applyPrefix","callExpression","arg","prefixed","project","createTempSourceFile","filename","dir","transform","opts","transformers","tempFile","transformer","updateFiles","files","filesCreatedSpinner","getRegistryBaseColor","filesCreated","filesUpdated","filesSkipped","file","filePath","resolveFilePath","findCommonRoot","f","fileName","match","existingFile","content","existingFileContent","normalizedExisting","normalizedNew","getNormalizedFileContent","overwrite","target","resolvePageTarget","resolveFileTargetDirectory","relativePath","resolveNestedFilePath","paths","normalizedPaths","p","normalizedNeedle","needleDir","needleSegments","testPath","normalizedFilePath","normalizedTargetDir","fileSegments","targetSegments","lastTargetSegment","commonDirIndex","segment","framework","addComponents","components","workspaceConfig","getWorkspaceConfig","addWorkspaceComponents","addProjectComponents","registrySpinner","tree","registryResolveItemsTree","handleError","getProjectTailwindVersionFromConfig","updateTailwindConfig","registryItems","resolveRegistryItems","fetchRegistry","payload","registryItemSchema","registryParentMap","getRegistryParentMap","registryTypeAliasMap","getRegistryTypeAliasMap","rootSpinner","component","registryParent","targetConfig","workspaceRoot","packageRoot","findPackageRoot","os","MONOREPO_TEMPLATE_URL","TEMPLATES","createProject","template","projectName","nextVersion","isRemoteComponent","meta","error","type","projectPath","createNextProject","createMonorepoProject","createSpinner","args","templatePath","response","tarPath","extractedPath","cwd","updateTailwindContent","tailwindFileRelativePath","transformTailwindContent","_createSourceFile","configObject","property","addTailwindConfigContent","quoteChar","_getQuoteChar","existingProperty","newProperty","initializer","contentItem","newValue","element","Command","initOptionsSchema","val","BASE_COLORS","color","init","runInit","newProjectTemplate","preflight","getConfig","projectConfig","getProjectConfig","promptForMinimalConfig","promptForConfig","proceed","componentSpinner","targetPath","fullConfig","resolveConfigPaths","defaultConfig","styles","baseColors","getRegistryStyles","getRegistryBaseColors","style","DEFAULT_TAILWIND_CSS","DEFAULT_TAILWIND_CONFIG","DEFAULT_COMPONENTS","DEFAULT_UTILS","rawConfigSchema","cssVariables","preFlightAdd","updateAppIndex","indexPath","registryItem","getRegistryItem","DEPRECATED_COMPONENTS","addOptionsSchema","add","isTheme","confirm","promptForRegistryComponents","deprecatedComponents","shouldUpdateAppIndex","registryIndex","getRegistryIndex","entry","c","preFlightBuild","resolvePaths","buildOptionsSchema","build","registry","registrySchema","buildSpinner","diffLines","updateOptionsSchema","diff","projectComponents","item","componentsWithUpdates","changes","diffComponent","change","printDiff","fetchTree","getItemTargetPath","fileContent","registryContent","patch","part","info","randomBytes","fg","migrateIcons","uiPath","libraryChoices","iconLibrary","migrateOptions","migrationSpinner","migrateIconsFile","iconsMapping","sourceLibraryImport","targetLibraryImport","preFlightMigrate","migrations","migrateOptionsSchema","migration","migrate","package_default","main","program"],"mappings":"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","sourcesContent":["import path from \"path\"\nimport { runInit } from \"@/src/commands/init\"\nimport { preFlightAdd } from \"@/src/preflights/preflight-add\"\nimport { getRegistryIndex } from \"@/src/registry/api\"\nimport { addComponents } from \"@/src/utils/add-components\"\nimport { createProject } from \"@/src/utils/create-project\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getConfig } from \"@/src/utils/get-config\"\nimport { getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { updateAppIndex } from \"@/src/utils/update-app-index\"\nimport { Command } from \"commander\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nconst DEPRECATED_COMPONENTS = [\n  {\n    name: \"toast\",\n    deprecatedBy: \"sonner\",\n    message:\n      \"The toast component is deprecated. Use the sonner component instead.\",\n  },\n  {\n    name: \"toaster\",\n    deprecatedBy: \"sonner\",\n    message:\n      \"The toaster component is deprecated. Use the sonner component instead.\",\n  },\n]\n\nexport const addOptionsSchema = z.object({\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  overwrite: z.boolean(),\n  cwd: z.string(),\n  all: z.boolean(),\n  path: z.string().optional(),\n  silent: z.boolean(),\n  srcDir: z.boolean().optional(),\n  cssVariables: z.boolean(),\n})\n\nexport const add = new Command()\n  .name(\"add\")\n  .description(\"add a component to your project\")\n  .argument(\n    \"[components...]\",\n    \"the components to add or a url to the component.\"\n  )\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\"-o, --overwrite\", \"overwrite existing files.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-a, --all\", \"add all available components\", false)\n  .option(\"-p, --path <path>\", \"the path to add the component to.\")\n  .option(\"-s, --silent\", \"mute output.\", false)\n  .option(\n    \"--src-dir\",\n    \"use the src directory when creating a new project.\",\n    false\n  )\n  .option(\n    \"--no-src-dir\",\n    \"do not use the src directory when creating a new project.\"\n  )\n  .option(\"--css-variables\", \"use css variables for theming.\", true)\n  .option(\"--no-css-variables\", \"do not use css variables for theming.\")\n  .action(async (components, opts) => {\n    try {\n      const options = addOptionsSchema.parse({\n        components,\n        cwd: path.resolve(opts.cwd),\n        ...opts,\n      })\n\n      // Confirm if user is installing themes.\n      // For now, we assume a theme is prefixed with \"theme-\".\n      const isTheme = options.components?.some((component) =>\n        component.includes(\"theme-\")\n      )\n      if (!options.yes && isTheme) {\n        logger.break()\n        const { confirm } = await prompts({\n          type: \"confirm\",\n          name: \"confirm\",\n          message: highlighter.warn(\n            \"You are about to install a new theme. \\nExisting CSS variables will be overwritten. Continue?\"\n          ),\n        })\n        if (!confirm) {\n          logger.break()\n          logger.log(\"Theme installation cancelled.\")\n          logger.break()\n          process.exit(1)\n        }\n      }\n\n      if (!options.components?.length) {\n        options.components = await promptForRegistryComponents(options)\n      }\n\n      const projectInfo = await getProjectInfo(options.cwd)\n      if (projectInfo?.tailwindVersion === \"v4\") {\n        const deprecatedComponents = DEPRECATED_COMPONENTS.filter((component) =>\n          options.components?.includes(component.name)\n        )\n\n        if (deprecatedComponents?.length) {\n          logger.break()\n          deprecatedComponents.forEach((component) => {\n            logger.warn(highlighter.warn(component.message))\n          })\n          logger.break()\n          process.exit(1)\n        }\n      }\n\n      let { errors, config } = await preFlightAdd(options)\n\n      // No components.json file. Prompt the user to run init.\n      if (errors[ERRORS.MISSING_CONFIG]) {\n        const { proceed } = await prompts({\n          type: \"confirm\",\n          name: \"proceed\",\n          message: `You need to create a ${highlighter.info(\n            \"components.json\"\n          )} file to add components. Proceed?`,\n          initial: true,\n        })\n\n        if (!proceed) {\n          logger.break()\n          process.exit(1)\n        }\n\n        config = await runInit({\n          cwd: options.cwd,\n          yes: true,\n          force: true,\n          defaults: false,\n          skipPreflight: false,\n          silent: true,\n          isNewProject: false,\n          srcDir: options.srcDir,\n          cssVariables: options.cssVariables,\n        })\n      }\n\n      let shouldUpdateAppIndex = false\n      if (errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT]) {\n        const { projectPath, template } = await createProject({\n          cwd: options.cwd,\n          force: options.overwrite,\n          srcDir: options.srcDir,\n          components: options.components,\n        })\n        if (!projectPath) {\n          logger.break()\n          process.exit(1)\n        }\n        options.cwd = projectPath\n\n        if (template === \"next-monorepo\") {\n          options.cwd = path.resolve(options.cwd, \"apps/web\")\n          config = await getConfig(options.cwd)\n        } else {\n          config = await runInit({\n            cwd: options.cwd,\n            yes: true,\n            force: true,\n            defaults: false,\n            skipPreflight: true,\n            silent: true,\n            isNewProject: true,\n            srcDir: options.srcDir,\n            cssVariables: options.cssVariables,\n          })\n\n          shouldUpdateAppIndex =\n            options.components?.length === 1 &&\n            !!options.components[0].match(/\\/chat\\/b\\//)\n        }\n      }\n\n      if (!config) {\n        throw new Error(\n          `Failed to read config at ${highlighter.info(options.cwd)}.`\n        )\n      }\n\n      await addComponents(options.components, config, options)\n\n      // If we're adding a single component and it's from the v0 registry,\n      // let's update the app/page.tsx file to import the component.\n      if (shouldUpdateAppIndex) {\n        await updateAppIndex(options.components[0], config)\n      }\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n\nasync function promptForRegistryComponents(\n  options: z.infer<typeof addOptionsSchema>\n) {\n  const registryIndex = await getRegistryIndex()\n  if (!registryIndex) {\n    logger.break()\n    handleError(new Error(\"Failed to fetch registry index.\"))\n    return []\n  }\n\n  if (options.all) {\n    return registryIndex\n      .map((entry) => entry.name)\n      .filter(\n        (component) => !DEPRECATED_COMPONENTS.some((c) => c.name === component)\n      )\n  }\n\n  if (options.components?.length) {\n    return options.components\n  }\n\n  const { components } = await prompts({\n    type: \"multiselect\",\n    name: \"components\",\n    message: \"Which components would you like to add?\",\n    hint: \"Space to select. A to toggle all. Enter to submit.\",\n    instructions: false,\n    choices: registryIndex\n      .filter(\n        (entry) =>\n          entry.type === \"registry:ui\" &&\n          !DEPRECATED_COMPONENTS.some(\n            (component) => component.name === entry.name\n          )\n      )\n      .map((entry) => ({\n        title: entry.name,\n        value: entry.name,\n        selected: options.all ? true : options.components?.includes(entry.name),\n      })),\n  })\n\n  if (!components?.length) {\n    logger.warn(\"No components selected. Exiting.\")\n    logger.info(\"\")\n    process.exit(1)\n  }\n\n  const result = z.array(z.string()).safeParse(components)\n  if (!result.success) {\n    logger.error(\"\")\n    handleError(new Error(\"Something went wrong. Please try again.\"))\n    return []\n  }\n  return result.data\n}\n","import { promises as fs } from \"fs\"\nimport path from \"path\"\nimport { preFlightInit } from \"@/src/preflights/preflight-init\"\nimport {\n  BASE_COLORS,\n  getRegistryBaseColors,\n  getRegistryStyles,\n} from \"@/src/registry/api\"\nimport { addComponents } from \"@/src/utils/add-components\"\nimport { TEMPLATES, createProject } from \"@/src/utils/create-project\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport {\n  DEFAULT_COMPONENTS,\n  DEFAULT_TAILWIND_CONFIG,\n  DEFAULT_TAILWIND_CSS,\n  DEFAULT_UTILS,\n  getConfig,\n  rawConfigSchema,\n  resolveConfigPaths,\n  type Config,\n} from \"@/src/utils/get-config\"\nimport {\n  getProjectConfig,\n  getProjectInfo,\n  getProjectTailwindVersionFromConfig,\n} from \"@/src/utils/get-project-info\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { updateTailwindContent } from \"@/src/utils/updaters/update-tailwind-content\"\nimport { Command } from \"commander\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nexport const initOptionsSchema = z.object({\n  cwd: z.string(),\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  defaults: z.boolean(),\n  force: z.boolean(),\n  silent: z.boolean(),\n  isNewProject: z.boolean(),\n  srcDir: z.boolean().optional(),\n  cssVariables: z.boolean(),\n  template: z\n    .string()\n    .optional()\n    .refine(\n      (val) => {\n        if (val) {\n          return TEMPLATES[val as keyof typeof TEMPLATES]\n        }\n        return true\n      },\n      {\n        message: \"Invalid template. Please use 'next' or 'next-monorepo'.\",\n      }\n    ),\n  baseColor: z\n    .string()\n    .optional()\n    .refine(\n      (val) => {\n        if (val) {\n          return BASE_COLORS.find((color) => color.name === val)\n        }\n\n        return true\n      },\n      {\n        message: `Invalid base color. Please use '${BASE_COLORS.map(\n          (color) => color.name\n        ).join(\"', '\")}'`,\n      }\n    ),\n})\n\nexport const init = new Command()\n  .name(\"init\")\n  .description(\"initialize your project and install dependencies\")\n  .argument(\n    \"[components...]\",\n    \"the components to add or a url to the component.\"\n  )\n  .option(\n    \"-t, --template <template>\",\n    \"the template to use. (next, next-monorepo)\"\n  )\n  .option(\n    \"-b, --base-color <base-color>\",\n    \"the base color to use. (neutral, gray, zinc, stone, slate)\",\n    undefined\n  )\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", true)\n  .option(\"-d, --defaults,\", \"use default configuration.\", false)\n  .option(\"-f, --force\", \"force overwrite of existing configuration.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-s, --silent\", \"mute output.\", false)\n  .option(\n    \"--src-dir\",\n    \"use the src directory when creating a new project.\",\n    false\n  )\n  .option(\n    \"--no-src-dir\",\n    \"do not use the src directory when creating a new project.\"\n  )\n  .option(\"--css-variables\", \"use css variables for theming.\", true)\n  .option(\"--no-css-variables\", \"do not use css variables for theming.\")\n  .action(async (components, opts) => {\n    try {\n      const options = initOptionsSchema.parse({\n        cwd: path.resolve(opts.cwd),\n        isNewProject: false,\n        components,\n        ...opts,\n      })\n\n      await runInit(options)\n\n      logger.log(\n        `${highlighter.success(\n          \"Success!\"\n        )} Project initialization completed.\\nYou may now add components.`\n      )\n      logger.break()\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n\nexport async function runInit(\n  options: z.infer<typeof initOptionsSchema> & {\n    skipPreflight?: boolean\n  }\n) {\n  let projectInfo\n  let newProjectTemplate\n  if (!options.skipPreflight) {\n    const preflight = await preFlightInit(options)\n    if (preflight.errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT]) {\n      const { projectPath, template } = await createProject(options)\n      if (!projectPath) {\n        process.exit(1)\n      }\n      options.cwd = projectPath\n      options.isNewProject = true\n      newProjectTemplate = template\n    }\n    projectInfo = preflight.projectInfo\n  } else {\n    projectInfo = await getProjectInfo(options.cwd)\n  }\n\n  if (newProjectTemplate === \"next-monorepo\") {\n    options.cwd = path.resolve(options.cwd, \"apps/web\")\n    return await getConfig(options.cwd)\n  }\n\n  const projectConfig = await getProjectConfig(options.cwd, projectInfo)\n  const config = projectConfig\n    ? await promptForMinimalConfig(projectConfig, options)\n    : await promptForConfig(await getConfig(options.cwd))\n\n  if (!options.yes) {\n    const { proceed } = await prompts({\n      type: \"confirm\",\n      name: \"proceed\",\n      message: `Write configuration to ${highlighter.info(\n        \"components.json\"\n      )}. Proceed?`,\n      initial: true,\n    })\n\n    if (!proceed) {\n      process.exit(0)\n    }\n  }\n\n  // Write components.json.\n  const componentSpinner = spinner(`Writing components.json.`).start()\n  const targetPath = path.resolve(options.cwd, \"components.json\")\n  await fs.writeFile(targetPath, JSON.stringify(config, null, 2), \"utf8\")\n  componentSpinner.succeed()\n\n  // Add components.\n  const fullConfig = await resolveConfigPaths(options.cwd, config)\n  const components = [\"index\", ...(options.components || [])]\n  await addComponents(components, fullConfig, {\n    // Init will always overwrite files.\n    overwrite: true,\n    silent: options.silent,\n    isNewProject:\n      options.isNewProject || projectInfo?.framework.name === \"next-app\",\n  })\n\n  // If a new project is using src dir, let's update the tailwind content config.\n  // TODO: Handle this per framework.\n  if (options.isNewProject && options.srcDir) {\n    await updateTailwindContent(\n      [\"./src/**/*.{js,ts,jsx,tsx,mdx}\"],\n      fullConfig,\n      {\n        silent: options.silent,\n      }\n    )\n  }\n\n  return fullConfig\n}\n\nasync function promptForConfig(defaultConfig: Config | null = null) {\n  const [styles, baseColors] = await Promise.all([\n    getRegistryStyles(),\n    getRegistryBaseColors(),\n  ])\n\n  logger.info(\"\")\n  const options = await prompts([\n    {\n      type: \"toggle\",\n      name: \"typescript\",\n      message: `Would you like to use ${highlighter.info(\n        \"TypeScript\"\n      )} (recommended)?`,\n      initial: defaultConfig?.tsx ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n    {\n      type: \"select\",\n      name: \"style\",\n      message: `Which ${highlighter.info(\"style\")} would you like to use?`,\n      choices: styles.map((style) => ({\n        title: style.label,\n        value: style.name,\n      })),\n    },\n    {\n      type: \"select\",\n      name: \"tailwindBaseColor\",\n      message: `Which color would you like to use as the ${highlighter.info(\n        \"base color\"\n      )}?`,\n      choices: baseColors.map((color) => ({\n        title: color.label,\n        value: color.name,\n      })),\n    },\n    {\n      type: \"text\",\n      name: \"tailwindCss\",\n      message: `Where is your ${highlighter.info(\"global CSS\")} file?`,\n      initial: defaultConfig?.tailwind.css ?? DEFAULT_TAILWIND_CSS,\n    },\n    {\n      type: \"toggle\",\n      name: \"tailwindCssVariables\",\n      message: `Would you like to use ${highlighter.info(\n        \"CSS variables\"\n      )} for theming?`,\n      initial: defaultConfig?.tailwind.cssVariables ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n    {\n      type: \"text\",\n      name: \"tailwindPrefix\",\n      message: `Are you using a custom ${highlighter.info(\n        \"tailwind prefix eg. tw-\"\n      )}? (Leave blank if not)`,\n      initial: \"\",\n    },\n    {\n      type: \"text\",\n      name: \"tailwindConfig\",\n      message: `Where is your ${highlighter.info(\n        \"tailwind.config.js\"\n      )} located?`,\n      initial: defaultConfig?.tailwind.config ?? DEFAULT_TAILWIND_CONFIG,\n    },\n    {\n      type: \"text\",\n      name: \"components\",\n      message: `Configure the import alias for ${highlighter.info(\n        \"components\"\n      )}:`,\n      initial: defaultConfig?.aliases[\"components\"] ?? DEFAULT_COMPONENTS,\n    },\n    {\n      type: \"text\",\n      name: \"utils\",\n      message: `Configure the import alias for ${highlighter.info(\"utils\")}:`,\n      initial: defaultConfig?.aliases[\"utils\"] ?? DEFAULT_UTILS,\n    },\n    {\n      type: \"toggle\",\n      name: \"rsc\",\n      message: `Are you using ${highlighter.info(\"React Server Components\")}?`,\n      initial: defaultConfig?.rsc ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n  ])\n\n  return rawConfigSchema.parse({\n    $schema: \"https://ui.shadcn.com/schema.json\",\n    style: options.style,\n    tailwind: {\n      config: options.tailwindConfig,\n      css: options.tailwindCss,\n      baseColor: options.tailwindBaseColor,\n      cssVariables: options.tailwindCssVariables,\n      prefix: options.tailwindPrefix,\n    },\n    rsc: options.rsc,\n    tsx: options.typescript,\n    aliases: {\n      utils: options.utils,\n      components: options.components,\n      // TODO: fix this.\n      lib: options.components.replace(/\\/components$/, \"lib\"),\n      hooks: options.components.replace(/\\/components$/, \"hooks\"),\n    },\n  })\n}\n\nasync function promptForMinimalConfig(\n  defaultConfig: Config,\n  opts: z.infer<typeof initOptionsSchema>\n) {\n  let style = defaultConfig.style\n  let baseColor = opts.baseColor\n  let cssVariables = defaultConfig.tailwind.cssVariables\n\n  if (!opts.defaults) {\n    const [styles, baseColors, tailwindVersion] = await Promise.all([\n      getRegistryStyles(),\n      getRegistryBaseColors(),\n      getProjectTailwindVersionFromConfig(defaultConfig),\n    ])\n\n    const options = await prompts([\n      {\n        type: tailwindVersion === \"v4\" ? null : \"select\",\n        name: \"style\",\n        message: `Which ${highlighter.info(\"style\")} would you like to use?`,\n        choices: styles.map((style) => ({\n          title:\n            style.name === \"new-york\" ? \"New York (Recommended)\" : style.label,\n          value: style.name,\n        })),\n        initial: 0,\n      },\n      {\n        type: opts.baseColor ? null : \"select\",\n        name: \"tailwindBaseColor\",\n        message: `Which color would you like to use as the ${highlighter.info(\n          \"base color\"\n        )}?`,\n        choices: baseColors.map((color) => ({\n          title: color.label,\n          value: color.name,\n        })),\n      },\n    ])\n\n    style = options.style ?? \"new-york\"\n    baseColor = options.tailwindBaseColor ?? baseColor\n    cssVariables = opts.cssVariables\n  }\n\n  return rawConfigSchema.parse({\n    $schema: defaultConfig?.$schema,\n    style,\n    tailwind: {\n      ...defaultConfig?.tailwind,\n      baseColor,\n      cssVariables,\n    },\n    rsc: defaultConfig?.rsc,\n    tsx: defaultConfig?.tsx,\n    aliases: defaultConfig?.aliases,\n    iconLibrary: defaultConfig?.iconLibrary,\n  })\n}\n","import path from \"path\"\nimport { initOptionsSchema } from \"@/src/commands/init\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightInit(\n  options: z.infer<typeof initOptionsSchema>\n) {\n  const errors: Record<string, boolean> = {}\n\n  // Ensure target directory exists.\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (\n    !fs.existsSync(options.cwd) ||\n    !fs.existsSync(path.resolve(options.cwd, \"package.json\"))\n  ) {\n    errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] = true\n    return {\n      errors,\n      projectInfo: null,\n    }\n  }\n\n  const projectSpinner = spinner(`Preflight checks.`, {\n    silent: options.silent,\n  }).start()\n\n  if (\n    fs.existsSync(path.resolve(options.cwd, \"components.json\")) &&\n    !options.force\n  ) {\n    projectSpinner?.fail()\n    logger.break()\n    logger.error(\n      `A ${highlighter.info(\n        \"components.json\"\n      )} file already exists at ${highlighter.info(\n        options.cwd\n      )}.\\nTo start over, remove the ${highlighter.info(\n        \"components.json\"\n      )} file and run ${highlighter.info(\"init\")} again.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n\n  projectSpinner?.succeed()\n\n  const frameworkSpinner = spinner(`Verifying framework.`, {\n    silent: options.silent,\n  }).start()\n  const projectInfo = await getProjectInfo(options.cwd)\n  if (!projectInfo || projectInfo?.framework.name === \"manual\") {\n    errors[ERRORS.UNSUPPORTED_FRAMEWORK] = true\n    frameworkSpinner?.fail()\n    logger.break()\n    if (projectInfo?.framework.links.installation) {\n      logger.error(\n        `We could not detect a supported framework at ${highlighter.info(\n          options.cwd\n        )}.\\n` +\n          `Visit ${highlighter.info(\n            projectInfo?.framework.links.installation\n          )} to manually configure your project.\\nOnce configured, you can use the cli to add components.`\n      )\n    }\n    logger.break()\n    process.exit(1)\n  }\n  frameworkSpinner?.succeed(\n    `Verifying framework. Found ${highlighter.info(\n      projectInfo.framework.label\n    )}.`\n  )\n\n  let tailwindSpinnerMessage = \"Validating Tailwind CSS.\"\n\n  if (projectInfo.tailwindVersion === \"v4\") {\n    tailwindSpinnerMessage = `Validating Tailwind CSS config. Found ${highlighter.info(\n      \"v4\"\n    )}.`\n  }\n\n  const tailwindSpinner = spinner(tailwindSpinnerMessage, {\n    silent: options.silent,\n  }).start()\n  if (\n    projectInfo.tailwindVersion === \"v3\" &&\n    (!projectInfo?.tailwindConfigFile || !projectInfo?.tailwindCssFile)\n  ) {\n    errors[ERRORS.TAILWIND_NOT_CONFIGURED] = true\n    tailwindSpinner?.fail()\n  } else if (\n    projectInfo.tailwindVersion === \"v4\" &&\n    !projectInfo?.tailwindCssFile\n  ) {\n    errors[ERRORS.TAILWIND_NOT_CONFIGURED] = true\n    tailwindSpinner?.fail()\n  } else if (!projectInfo.tailwindVersion) {\n    errors[ERRORS.TAILWIND_NOT_CONFIGURED] = true\n    tailwindSpinner?.fail()\n  } else {\n    tailwindSpinner?.succeed()\n  }\n\n  const tsConfigSpinner = spinner(`Validating import alias.`, {\n    silent: options.silent,\n  }).start()\n  if (!projectInfo?.aliasPrefix) {\n    errors[ERRORS.IMPORT_ALIAS_MISSING] = true\n    tsConfigSpinner?.fail()\n  } else {\n    tsConfigSpinner?.succeed()\n  }\n\n  if (Object.keys(errors).length > 0) {\n    if (errors[ERRORS.TAILWIND_NOT_CONFIGURED]) {\n      logger.break()\n      logger.error(\n        `No Tailwind CSS configuration found at ${highlighter.info(\n          options.cwd\n        )}.`\n      )\n      logger.error(\n        `It is likely you do not have Tailwind CSS installed or have an invalid configuration.`\n      )\n      logger.error(`Install Tailwind CSS then try again.`)\n      if (projectInfo?.framework.links.tailwind) {\n        logger.error(\n          `Visit ${highlighter.info(\n            projectInfo?.framework.links.tailwind\n          )} to get started.`\n        )\n      }\n    }\n\n    if (errors[ERRORS.IMPORT_ALIAS_MISSING]) {\n      logger.break()\n      logger.error(`No import alias found in your tsconfig.json file.`)\n      if (projectInfo?.framework.links.installation) {\n        logger.error(\n          `Visit ${highlighter.info(\n            projectInfo?.framework.links.installation\n          )} to learn how to set an import alias.`\n        )\n      }\n    }\n\n    logger.break()\n    process.exit(1)\n  }\n\n  return {\n    errors,\n    projectInfo,\n  }\n}\n","export const MISSING_DIR_OR_EMPTY_PROJECT = \"1\"\nexport const EXISTING_CONFIG = \"2\"\nexport const MISSING_CONFIG = \"3\"\nexport const FAILED_CONFIG_READ = \"4\"\nexport const TAILWIND_NOT_CONFIGURED = \"5\"\nexport const IMPORT_ALIAS_MISSING = \"6\"\nexport const UNSUPPORTED_FRAMEWORK = \"7\"\nexport const COMPONENT_URL_NOT_FOUND = \"8\"\nexport const COMPONENT_URL_UNAUTHORIZED = \"9\"\nexport const COMPONENT_URL_FORBIDDEN = \"10\"\nexport const COMPONENT_URL_BAD_REQUEST = \"11\"\nexport const COMPONENT_URL_INTERNAL_SERVER_ERROR = \"12\"\nexport const BUILD_MISSING_REGISTRY_FILE = \"13\"\n","import path from \"path\"\nimport {\n  fetchRegistry,\n  getRegistryParentMap,\n  getRegistryTypeAliasMap,\n  registryResolveItemsTree,\n  resolveRegistryItems,\n} from \"@/src/registry/api\"\nimport { registryItemSchema } from \"@/src/registry/schema\"\nimport {\n  configSchema,\n  findCommonRoot,\n  findPackageRoot,\n  getWorkspaceConfig,\n  workspaceConfigSchema,\n  type Config,\n} from \"@/src/utils/get-config\"\nimport { getProjectTailwindVersionFromConfig } from \"@/src/utils/get-project-info\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { updateCssVars } from \"@/src/utils/updaters/update-css-vars\"\nimport { updateDependencies } from \"@/src/utils/updaters/update-dependencies\"\nimport { updateFiles } from \"@/src/utils/updaters/update-files\"\nimport { updateTailwindConfig } from \"@/src/utils/updaters/update-tailwind-config\"\nimport { z } from \"zod\"\n\nexport async function addComponents(\n  components: string[],\n  config: Config,\n  options: {\n    overwrite?: boolean\n    silent?: boolean\n    isNewProject?: boolean\n  }\n) {\n  options = {\n    overwrite: false,\n    silent: false,\n    isNewProject: false,\n    ...options,\n  }\n\n  const workspaceConfig = await getWorkspaceConfig(config)\n  if (\n    workspaceConfig &&\n    workspaceConfig.ui &&\n    workspaceConfig.ui.resolvedPaths.cwd !== config.resolvedPaths.cwd\n  ) {\n    return await addWorkspaceComponents(components, config, workspaceConfig, {\n      ...options,\n      isRemote:\n        components?.length === 1 && !!components[0].match(/\\/chat\\/b\\//),\n    })\n  }\n\n  return await addProjectComponents(components, config, options)\n}\n\nasync function addProjectComponents(\n  components: string[],\n  config: z.infer<typeof configSchema>,\n  options: {\n    overwrite?: boolean\n    silent?: boolean\n    isNewProject?: boolean\n  }\n) {\n  const registrySpinner = spinner(`Checking registry.`, {\n    silent: options.silent,\n  })?.start()\n  const tree = await registryResolveItemsTree(components, config)\n  if (!tree) {\n    registrySpinner?.fail()\n    return handleError(new Error(\"Failed to fetch components from registry.\"))\n  }\n  registrySpinner?.succeed()\n\n  const tailwindVersion = await getProjectTailwindVersionFromConfig(config)\n\n  await updateTailwindConfig(tree.tailwind?.config, config, {\n    silent: options.silent,\n    tailwindVersion,\n  })\n  await updateCssVars(tree.cssVars, config, {\n    cleanupDefaultNextStyles: options.isNewProject,\n    silent: options.silent,\n    tailwindVersion,\n    tailwindConfig: tree.tailwind?.config,\n  })\n\n  await updateDependencies(tree.dependencies, config, {\n    silent: options.silent,\n  })\n  await updateFiles(tree.files, config, {\n    overwrite: options.overwrite,\n    silent: options.silent,\n  })\n\n  if (tree.docs) {\n    logger.info(tree.docs)\n  }\n}\n\nasync function addWorkspaceComponents(\n  components: string[],\n  config: z.infer<typeof configSchema>,\n  workspaceConfig: z.infer<typeof workspaceConfigSchema>,\n  options: {\n    overwrite?: boolean\n    silent?: boolean\n    isNewProject?: boolean\n    isRemote?: boolean\n  }\n) {\n  const registrySpinner = spinner(`Checking registry.`, {\n    silent: options.silent,\n  })?.start()\n  let registryItems = await resolveRegistryItems(components, config)\n  let result = await fetchRegistry(registryItems)\n  const payload = z.array(registryItemSchema).parse(result)\n  if (!payload) {\n    registrySpinner?.fail()\n    return handleError(new Error(\"Failed to fetch components from registry.\"))\n  }\n  registrySpinner?.succeed()\n\n  const registryParentMap = getRegistryParentMap(payload)\n  const registryTypeAliasMap = getRegistryTypeAliasMap()\n\n  const filesCreated: string[] = []\n  const filesUpdated: string[] = []\n  const filesSkipped: string[] = []\n\n  const rootSpinner = spinner(`Installing components.`)?.start()\n\n  for (const component of payload) {\n    const alias = registryTypeAliasMap.get(component.type)\n    const registryParent = registryParentMap.get(component.name)\n\n    // We don't support this type of component.\n    if (!alias) {\n      continue\n    }\n\n    // A good start is ui for now.\n    // TODO: Add support for other types.\n    let targetConfig =\n      component.type === \"registry:ui\" || registryParent?.type === \"registry:ui\"\n        ? workspaceConfig.ui\n        : config\n\n    const tailwindVersion = await getProjectTailwindVersionFromConfig(\n      targetConfig\n    )\n\n    const workspaceRoot = findCommonRoot(\n      config.resolvedPaths.cwd,\n      targetConfig.resolvedPaths.ui\n    )\n    const packageRoot =\n      (await findPackageRoot(workspaceRoot, targetConfig.resolvedPaths.cwd)) ??\n      targetConfig.resolvedPaths.cwd\n\n    // 1. Update tailwind config.\n    if (component.tailwind?.config) {\n      await updateTailwindConfig(component.tailwind?.config, targetConfig, {\n        silent: true,\n        tailwindVersion,\n      })\n      filesUpdated.push(\n        path.relative(workspaceRoot, targetConfig.resolvedPaths.tailwindConfig)\n      )\n    }\n\n    // 2. Update css vars.\n    if (component.cssVars) {\n      await updateCssVars(component.cssVars, targetConfig, {\n        silent: true,\n        tailwindVersion,\n        tailwindConfig: component.tailwind?.config,\n      })\n      filesUpdated.push(\n        path.relative(workspaceRoot, targetConfig.resolvedPaths.tailwindCss)\n      )\n    }\n\n    // 3. Update dependencies.\n    await updateDependencies(component.dependencies, targetConfig, {\n      silent: true,\n    })\n\n    // 4. Update files.\n    const files = await updateFiles(component.files, targetConfig, {\n      overwrite: options.overwrite,\n      silent: true,\n      rootSpinner,\n      isRemote: options.isRemote,\n    })\n\n    filesCreated.push(\n      ...files.filesCreated.map((file) =>\n        path.relative(workspaceRoot, path.join(packageRoot, file))\n      )\n    )\n    filesUpdated.push(\n      ...files.filesUpdated.map((file) =>\n        path.relative(workspaceRoot, path.join(packageRoot, file))\n      )\n    )\n    filesSkipped.push(\n      ...files.filesSkipped.map((file) =>\n        path.relative(workspaceRoot, path.join(packageRoot, file))\n      )\n    )\n  }\n\n  rootSpinner?.succeed()\n\n  // Sort files.\n  filesCreated.sort()\n  filesUpdated.sort()\n  filesSkipped.sort()\n\n  const hasUpdatedFiles = filesCreated.length || filesUpdated.length\n  if (!hasUpdatedFiles && !filesSkipped.length) {\n    spinner(`No files updated.`, {\n      silent: options.silent,\n    })?.info()\n  }\n\n  if (filesCreated.length) {\n    spinner(\n      `Created ${filesCreated.length} ${\n        filesCreated.length === 1 ? \"file\" : \"files\"\n      }:`,\n      {\n        silent: options.silent,\n      }\n    )?.succeed()\n    for (const file of filesCreated) {\n      logger.log(`  - ${file}`)\n    }\n  }\n\n  if (filesUpdated.length) {\n    spinner(\n      `Updated ${filesUpdated.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }:`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    for (const file of filesUpdated) {\n      logger.log(`  - ${file}`)\n    }\n  }\n\n  if (filesSkipped.length) {\n    spinner(\n      `Skipped ${filesSkipped.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }: (use --overwrite to overwrite)`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    for (const file of filesSkipped) {\n      logger.log(`  - ${file}`)\n    }\n  }\n}\n","import { promises as fs } from \"fs\"\nimport path from \"path\"\nimport {\n  registryItemCssVarsSchema,\n  registryItemTailwindSchema,\n} from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { getPackageInfo } from \"@/src/utils/get-package-info\"\nimport { TailwindVersion } from \"@/src/utils/get-project-info\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport postcss from \"postcss\"\nimport AtRule from \"postcss/lib/at-rule\"\nimport Root from \"postcss/lib/root\"\nimport Rule from \"postcss/lib/rule\"\nimport { z } from \"zod\"\n\nexport async function updateCssVars(\n  cssVars: z.infer<typeof registryItemCssVarsSchema> | undefined,\n  config: Config,\n  options: {\n    cleanupDefaultNextStyles?: boolean\n    silent?: boolean\n    tailwindVersion?: TailwindVersion\n    tailwindConfig?: z.infer<typeof registryItemTailwindSchema>[\"config\"]\n  }\n) {\n  if (!config.resolvedPaths.tailwindCss || !Object.keys(cssVars ?? {}).length) {\n    return\n  }\n\n  options = {\n    cleanupDefaultNextStyles: false,\n    silent: false,\n    tailwindVersion: \"v3\",\n    ...options,\n  }\n  const cssFilepath = config.resolvedPaths.tailwindCss\n  const cssFilepathRelative = path.relative(\n    config.resolvedPaths.cwd,\n    cssFilepath\n  )\n  const cssVarsSpinner = spinner(\n    `Updating ${highlighter.info(cssFilepathRelative)}`,\n    {\n      silent: options.silent,\n    }\n  ).start()\n  const raw = await fs.readFile(cssFilepath, \"utf8\")\n  let output = await transformCssVars(raw, cssVars ?? {}, config, {\n    cleanupDefaultNextStyles: options.cleanupDefaultNextStyles,\n    tailwindVersion: options.tailwindVersion,\n    tailwindConfig: options.tailwindConfig,\n  })\n  await fs.writeFile(cssFilepath, output, \"utf8\")\n  cssVarsSpinner.succeed()\n}\n\nexport async function transformCssVars(\n  input: string,\n  cssVars: z.infer<typeof registryItemCssVarsSchema>,\n  config: Config,\n  options: {\n    cleanupDefaultNextStyles?: boolean\n    tailwindVersion?: TailwindVersion\n    tailwindConfig?: z.infer<typeof registryItemTailwindSchema>[\"config\"]\n  } = {\n    cleanupDefaultNextStyles: false,\n    tailwindVersion: \"v3\",\n    tailwindConfig: undefined,\n  }\n) {\n  options = {\n    cleanupDefaultNextStyles: false,\n    tailwindVersion: \"v3\",\n    tailwindConfig: undefined,\n    ...options,\n  }\n\n  let plugins = [updateCssVarsPlugin(cssVars)]\n\n  if (options.cleanupDefaultNextStyles) {\n    plugins.push(cleanupDefaultNextStylesPlugin())\n  }\n\n  if (options.tailwindVersion === \"v4\") {\n    plugins = []\n\n    // Only add tw-animate-css if project does not have tailwindcss-animate\n    if (config.resolvedPaths?.cwd) {\n      const packageInfo = getPackageInfo(config.resolvedPaths.cwd)\n      if (\n        !packageInfo?.dependencies?.[\"tailwindcss-animate\"] &&\n        !packageInfo?.devDependencies?.[\"tailwindcss-animate\"]\n      ) {\n        plugins.push(addCustomImport({ params: \"tw-animate-css\" }))\n      }\n    }\n\n    plugins.push(addCustomVariant({ params: \"dark (&:is(.dark *))\" }))\n\n    if (options.cleanupDefaultNextStyles) {\n      plugins.push(cleanupDefaultNextStylesPlugin())\n    }\n\n    plugins.push(updateCssVarsPluginV4(cssVars))\n    plugins.push(updateThemePlugin(cssVars))\n\n    if (options.tailwindConfig) {\n      plugins.push(updateTailwindConfigPlugin(options.tailwindConfig))\n      plugins.push(updateTailwindConfigAnimationPlugin(options.tailwindConfig))\n      plugins.push(updateTailwindConfigKeyframesPlugin(options.tailwindConfig))\n    }\n  }\n\n  if (config.tailwind.cssVariables) {\n    plugins.push(\n      updateBaseLayerPlugin({ tailwindVersion: options.tailwindVersion })\n    )\n  }\n\n  const result = await postcss(plugins).process(input, {\n    from: undefined,\n  })\n\n  let output = result.css\n\n  output = output.replace(/\\/\\* ---break--- \\*\\//g, \"\")\n\n  if (options.tailwindVersion === \"v4\") {\n    output = output.replace(/(\\n\\s*\\n)+/g, \"\\n\\n\")\n  }\n\n  return output\n}\n\nfunction updateBaseLayerPlugin({\n  tailwindVersion,\n}: {\n  tailwindVersion?: TailwindVersion\n}) {\n  return {\n    postcssPlugin: \"update-base-layer\",\n    Once(root: Root) {\n      const requiredRules = [\n        {\n          selector: \"*\",\n          apply:\n            tailwindVersion === \"v4\"\n              ? \"border-border outline-ring/50\"\n              : \"border-border\",\n        },\n        { selector: \"body\", apply: \"bg-background text-foreground\" },\n      ]\n\n      let baseLayer = root.nodes.find(\n        (node): node is AtRule =>\n          node.type === \"atrule\" &&\n          node.name === \"layer\" &&\n          node.params === \"base\" &&\n          requiredRules.every(({ selector, apply }) =>\n            node.nodes?.some(\n              (rule): rule is Rule =>\n                rule.type === \"rule\" &&\n                rule.selector === selector &&\n                rule.nodes.some(\n                  (applyRule): applyRule is AtRule =>\n                    applyRule.type === \"atrule\" &&\n                    applyRule.name === \"apply\" &&\n                    applyRule.params === apply\n                )\n            )\n          )\n      ) as AtRule | undefined\n\n      if (!baseLayer) {\n        baseLayer = postcss.atRule({\n          name: \"layer\",\n          params: \"base\",\n          raws: { semicolon: true, between: \" \", before: \"\\n\" },\n        })\n        root.append(baseLayer)\n        root.insertBefore(baseLayer, postcss.comment({ text: \"---break---\" }))\n      }\n\n      requiredRules.forEach(({ selector, apply }) => {\n        const existingRule = baseLayer?.nodes?.find(\n          (node): node is Rule =>\n            node.type === \"rule\" && node.selector === selector\n        )\n\n        if (!existingRule) {\n          baseLayer?.append(\n            postcss.rule({\n              selector,\n              nodes: [\n                postcss.atRule({\n                  name: \"apply\",\n                  params: apply,\n                  raws: { semicolon: true, before: \"\\n    \" },\n                }),\n              ],\n              raws: { semicolon: true, between: \" \", before: \"\\n  \" },\n            })\n          )\n        }\n      })\n    },\n  }\n}\n\nfunction updateCssVarsPlugin(\n  cssVars: z.infer<typeof registryItemCssVarsSchema>\n) {\n  return {\n    postcssPlugin: \"update-css-vars\",\n    Once(root: Root) {\n      let baseLayer = root.nodes.find(\n        (node) =>\n          node.type === \"atrule\" &&\n          node.name === \"layer\" &&\n          node.params === \"base\"\n      ) as AtRule | undefined\n\n      if (!(baseLayer instanceof AtRule)) {\n        baseLayer = postcss.atRule({\n          name: \"layer\",\n          params: \"base\",\n          nodes: [],\n          raws: {\n            semicolon: true,\n            before: \"\\n\",\n            between: \" \",\n          },\n        })\n        root.append(baseLayer)\n        root.insertBefore(baseLayer, postcss.comment({ text: \"---break---\" }))\n      }\n\n      if (baseLayer !== undefined) {\n        // Add variables for each key in cssVars\n        Object.entries(cssVars).forEach(([key, vars]) => {\n          const selector = key === \"light\" ? \":root\" : `.${key}`\n          // TODO: Fix typecheck.\n          addOrUpdateVars(baseLayer as AtRule, selector, vars)\n        })\n      }\n    },\n  }\n}\n\nfunction removeConflictVars(root: Rule | Root) {\n  const rootRule = root.nodes.find(\n    (node): node is Rule => node.type === \"rule\" && node.selector === \":root\"\n  )\n\n  if (rootRule) {\n    const propsToRemove = [\"--background\", \"--foreground\"]\n\n    rootRule.nodes\n      .filter(\n        (node): node is postcss.Declaration =>\n          node.type === \"decl\" && propsToRemove.includes(node.prop)\n      )\n      .forEach((node) => node.remove())\n\n    if (rootRule.nodes.length === 0) {\n      rootRule.remove()\n    }\n  }\n}\n\nfunction cleanupDefaultNextStylesPlugin() {\n  return {\n    postcssPlugin: \"cleanup-default-next-styles\",\n    Once(root: Root) {\n      const bodyRule = root.nodes.find(\n        (node): node is Rule => node.type === \"rule\" && node.selector === \"body\"\n      )\n      if (bodyRule) {\n        // Remove color from the body node.\n        bodyRule.nodes\n          .find(\n            (node): node is postcss.Declaration =>\n              node.type === \"decl\" &&\n              node.prop === \"color\" &&\n              [\"rgb(var(--foreground-rgb))\", \"var(--foreground)\"].includes(\n                node.value\n              )\n          )\n          ?.remove()\n\n        // Remove background: linear-gradient.\n        bodyRule.nodes\n          .find((node): node is postcss.Declaration => {\n            return (\n              node.type === \"decl\" &&\n              node.prop === \"background\" &&\n              // This is only going to run on create project, so all good.\n              (node.value.startsWith(\"linear-gradient\") ||\n                node.value === \"var(--background)\")\n            )\n          })\n          ?.remove()\n\n        // Remove font-family: Arial, Helvetica, sans-serif;\n        bodyRule.nodes\n          .find(\n            (node): node is postcss.Declaration =>\n              node.type === \"decl\" &&\n              node.prop === \"font-family\" &&\n              node.value === \"Arial, Helvetica, sans-serif\"\n          )\n          ?.remove()\n\n        // If the body rule is empty, remove it.\n        if (bodyRule.nodes.length === 0) {\n          bodyRule.remove()\n        }\n      }\n\n      removeConflictVars(root)\n\n      const darkRootRule = root.nodes.find(\n        (node): node is Rule =>\n          node.type === \"atrule\" &&\n          node.params === \"(prefers-color-scheme: dark)\"\n      )\n\n      if (darkRootRule) {\n        removeConflictVars(darkRootRule)\n        if (darkRootRule.nodes.length === 0) {\n          darkRootRule.remove()\n        }\n      }\n    },\n  }\n}\n\nfunction addOrUpdateVars(\n  baseLayer: AtRule,\n  selector: string,\n  vars: Record<string, string>\n) {\n  let ruleNode = baseLayer.nodes?.find(\n    (node): node is Rule => node.type === \"rule\" && node.selector === selector\n  )\n\n  if (!ruleNode) {\n    if (Object.keys(vars).length > 0) {\n      ruleNode = postcss.rule({\n        selector,\n        raws: { between: \" \", before: \"\\n  \" },\n      })\n      baseLayer.append(ruleNode)\n    }\n  }\n\n  Object.entries(vars).forEach(([key, value]) => {\n    const prop = `--${key.replace(/^--/, \"\")}`\n    const newDecl = postcss.decl({\n      prop,\n      value,\n      raws: { semicolon: true },\n    })\n\n    const existingDecl = ruleNode?.nodes.find(\n      (node): node is postcss.Declaration =>\n        node.type === \"decl\" && node.prop === prop\n    )\n\n    existingDecl ? existingDecl.replaceWith(newDecl) : ruleNode?.append(newDecl)\n  })\n}\n\nfunction updateCssVarsPluginV4(\n  cssVars: z.infer<typeof registryItemCssVarsSchema>\n) {\n  return {\n    postcssPlugin: \"update-css-vars-v4\",\n    Once(root: Root) {\n      Object.entries(cssVars).forEach(([key, vars]) => {\n        const selector = key === \"light\" ? \":root\" : `.${key}`\n\n        let ruleNode = root.nodes?.find(\n          (node): node is Rule =>\n            node.type === \"rule\" && node.selector === selector\n        )\n\n        if (!ruleNode && Object.keys(vars).length > 0) {\n          ruleNode = postcss.rule({\n            selector,\n            nodes: [],\n            raws: { semicolon: true, between: \" \", before: \"\\n\" },\n          })\n          root.append(ruleNode)\n          root.insertBefore(ruleNode, postcss.comment({ text: \"---break---\" }))\n        }\n\n        Object.entries(vars).forEach(([key, value]) => {\n          let prop = `--${key.replace(/^--/, \"\")}`\n\n          // Special case for sidebar-background.\n          if (prop === \"--sidebar-background\") {\n            prop = \"--sidebar\"\n          }\n\n          if (isLocalHSLValue(value)) {\n            value = `hsl(${value})`\n          }\n\n          const newDecl = postcss.decl({\n            prop,\n            value,\n            raws: { semicolon: true },\n          })\n          const existingDecl = ruleNode?.nodes.find(\n            (node): node is postcss.Declaration =>\n              node.type === \"decl\" && node.prop === prop\n          )\n\n          // Do not override existing declarations.\n          // We do not want new components to override existing vars.\n          // Keep user defined vars.\n          if (!existingDecl) {\n            ruleNode?.append(newDecl)\n          }\n        })\n      })\n    },\n  }\n}\n\nfunction updateThemePlugin(cssVars: z.infer<typeof registryItemCssVarsSchema>) {\n  return {\n    postcssPlugin: \"update-theme\",\n    Once(root: Root) {\n      // Find unique color names from light and dark.\n      const variables = Array.from(\n        new Set(\n          Object.keys(cssVars).flatMap((key) =>\n            Object.keys(cssVars[key as keyof typeof cssVars] || {})\n          )\n        )\n      )\n\n      if (!variables.length) {\n        return\n      }\n\n      const themeNode = upsertThemeNode(root)\n\n      const themeVarNodes = themeNode.nodes?.filter(\n        (node): node is postcss.Declaration =>\n          node.type === \"decl\" && node.prop.startsWith(\"--\")\n      )\n\n      for (const variable of variables) {\n        const value = Object.values(cssVars).find((vars) => vars[variable])?.[\n          variable\n        ]\n\n        if (!value) {\n          continue\n        }\n\n        if (variable === \"radius\") {\n          const radiusVariables = {\n            sm: \"calc(var(--radius) - 4px)\",\n            md: \"calc(var(--radius) - 2px)\",\n            lg: \"var(--radius)\",\n            xl: \"calc(var(--radius) + 4px)\",\n          }\n          for (const [key, value] of Object.entries(radiusVariables)) {\n            const cssVarNode = postcss.decl({\n              prop: `--radius-${key}`,\n              value,\n              raws: { semicolon: true },\n            })\n            if (\n              themeNode?.nodes?.find(\n                (node): node is postcss.Declaration =>\n                  node.type === \"decl\" && node.prop === cssVarNode.prop\n              )\n            ) {\n              continue\n            }\n            themeNode?.append(cssVarNode)\n          }\n          continue\n        }\n\n        let prop =\n          isLocalHSLValue(value) || isColorValue(value)\n            ? `--color-${variable.replace(/^--/, \"\")}`\n            : `--${variable.replace(/^--/, \"\")}`\n        if (prop === \"--color-sidebar-background\") {\n          prop = \"--color-sidebar\"\n        }\n\n        let propValue = `var(--${variable})`\n        if (prop === \"--color-sidebar\") {\n          propValue = \"var(--sidebar)\"\n        }\n\n        const cssVarNode = postcss.decl({\n          prop,\n          value: propValue,\n          raws: { semicolon: true },\n        })\n        const existingDecl = themeNode?.nodes?.find(\n          (node): node is postcss.Declaration =>\n            node.type === \"decl\" && node.prop === cssVarNode.prop\n        )\n        if (!existingDecl) {\n          if (themeVarNodes?.length) {\n            themeNode?.insertAfter(\n              themeVarNodes[themeVarNodes.length - 1],\n              cssVarNode\n            )\n          } else {\n            themeNode?.append(cssVarNode)\n          }\n        }\n      }\n    },\n  }\n}\n\nfunction upsertThemeNode(root: Root): AtRule {\n  let themeNode = root.nodes.find(\n    (node): node is AtRule =>\n      node.type === \"atrule\" &&\n      node.name === \"theme\" &&\n      node.params === \"inline\"\n  )\n\n  if (!themeNode) {\n    themeNode = postcss.atRule({\n      name: \"theme\",\n      params: \"inline\",\n      nodes: [],\n      raws: { semicolon: true, between: \" \", before: \"\\n\" },\n    })\n    root.append(themeNode)\n    root.insertBefore(themeNode, postcss.comment({ text: \"---break---\" }))\n  }\n\n  return themeNode\n}\n\nfunction addCustomVariant({ params }: { params: string }) {\n  return {\n    postcssPlugin: \"add-custom-variant\",\n    Once(root: Root) {\n      const customVariant = root.nodes.find(\n        (node): node is AtRule =>\n          node.type === \"atrule\" && node.name === \"custom-variant\"\n      )\n\n      if (!customVariant) {\n        // Find all import nodes\n        const importNodes = root.nodes.filter(\n          (node): node is AtRule =>\n            node.type === \"atrule\" && node.name === \"import\"\n        )\n\n        const variantNode = postcss.atRule({\n          name: \"custom-variant\",\n          params,\n          raws: { semicolon: true, before: \"\\n\" },\n        })\n\n        if (importNodes.length > 0) {\n          // Insert after the last import\n          const lastImport = importNodes[importNodes.length - 1]\n          root.insertAfter(lastImport, variantNode)\n        } else {\n          // If no imports, insert after the first node\n          root.insertAfter(root.nodes[0], variantNode)\n        }\n\n        root.insertBefore(variantNode, postcss.comment({ text: \"---break---\" }))\n      }\n    },\n  }\n}\n\nfunction addCustomImport({ params }: { params: string }) {\n  return {\n    postcssPlugin: \"add-custom-import\",\n    Once(root: Root) {\n      const importNodes = root.nodes.filter(\n        (node): node is AtRule =>\n          node.type === \"atrule\" && node.name === \"import\"\n      )\n\n      // Find custom variant node (to ensure we insert before it)\n      const customVariantNode = root.nodes.find(\n        (node): node is AtRule =>\n          node.type === \"atrule\" && node.name === \"custom-variant\"\n      )\n\n      // Check if our specific import already exists\n      const hasImport = importNodes.some(\n        (node) => node.params.replace(/[\"']/g, \"\") === params\n      )\n\n      if (!hasImport) {\n        const importNode = postcss.atRule({\n          name: \"import\",\n          params: `\"${params}\"`,\n          raws: { semicolon: true, before: \"\\n\" },\n        })\n\n        if (importNodes.length > 0) {\n          // If there are existing imports, add after the last import\n          const lastImport = importNodes[importNodes.length - 1]\n          root.insertAfter(lastImport, importNode)\n        } else if (customVariantNode) {\n          // If no imports but has custom-variant, insert before it\n          root.insertBefore(customVariantNode, importNode)\n          root.insertBefore(\n            customVariantNode,\n            postcss.comment({ text: \"---break---\" })\n          )\n        } else {\n          // If no imports and no custom-variant, insert at the start\n          root.prepend(importNode)\n          root.insertAfter(importNode, postcss.comment({ text: \"---break---\" }))\n        }\n      }\n    },\n  }\n}\n\nfunction updateTailwindConfigPlugin(\n  tailwindConfig: z.infer<typeof registryItemTailwindSchema>[\"config\"]\n) {\n  return {\n    postcssPlugin: \"update-tailwind-config\",\n    Once(root: Root) {\n      if (!tailwindConfig?.plugins) {\n        return\n      }\n\n      const quoteType = getQuoteType(root)\n      const quote = quoteType === \"single\" ? \"'\" : '\"'\n\n      const pluginNodes = root.nodes.filter(\n        (node): node is AtRule =>\n          node.type === \"atrule\" && node.name === \"plugin\"\n      )\n\n      const lastPluginNode =\n        pluginNodes[pluginNodes.length - 1] || root.nodes[0]\n\n      for (const plugin of tailwindConfig.plugins) {\n        const pluginName = plugin.replace(/^require\\([\"']|[\"']\\)$/g, \"\")\n\n        // Check if the plugin is already present.\n        if (\n          pluginNodes.some((node) => {\n            return node.params.replace(/[\"']/g, \"\") === pluginName\n          })\n        ) {\n          continue\n        }\n\n        const pluginNode = postcss.atRule({\n          name: \"plugin\",\n          params: `${quote}${pluginName}${quote}`,\n          raws: { semicolon: true, before: \"\\n\" },\n        })\n        root.insertAfter(lastPluginNode, pluginNode)\n        root.insertBefore(pluginNode, postcss.comment({ text: \"---break---\" }))\n      }\n    },\n  }\n}\n\nfunction updateTailwindConfigKeyframesPlugin(\n  tailwindConfig: z.infer<typeof registryItemTailwindSchema>[\"config\"]\n) {\n  return {\n    postcssPlugin: \"update-tailwind-config-keyframes\",\n    Once(root: Root) {\n      if (!tailwindConfig?.theme?.extend?.keyframes) {\n        return\n      }\n\n      const themeNode = upsertThemeNode(root)\n      const existingKeyFrameNodes = themeNode.nodes?.filter(\n        (node): node is AtRule =>\n          node.type === \"atrule\" && node.name === \"keyframes\"\n      )\n\n      const keyframeValueSchema = z.record(\n        z.string(),\n        z.record(z.string(), z.string())\n      )\n\n      for (const [keyframeName, keyframeValue] of Object.entries(\n        tailwindConfig.theme.extend.keyframes\n      )) {\n        if (typeof keyframeName !== \"string\") {\n          continue\n        }\n\n        const parsedKeyframeValue = keyframeValueSchema.safeParse(keyframeValue)\n\n        if (!parsedKeyframeValue.success) {\n          continue\n        }\n\n        if (\n          existingKeyFrameNodes?.find(\n            (node): node is postcss.AtRule =>\n              node.type === \"atrule\" &&\n              node.name === \"keyframes\" &&\n              node.params === keyframeName\n          )\n        ) {\n          continue\n        }\n\n        const keyframeNode = postcss.atRule({\n          name: \"keyframes\",\n          params: keyframeName,\n          nodes: [],\n          raws: { semicolon: true, between: \" \", before: \"\\n  \" },\n        })\n\n        for (const [key, values] of Object.entries(parsedKeyframeValue.data)) {\n          const rule = postcss.rule({\n            selector: key,\n            nodes: Object.entries(values).map(([key, value]) =>\n              postcss.decl({\n                prop: key,\n                value,\n                raws: { semicolon: true, before: \"\\n      \", between: \": \" },\n              })\n            ),\n            raws: { semicolon: true, between: \" \", before: \"\\n    \" },\n          })\n          keyframeNode.append(rule)\n        }\n\n        themeNode.append(keyframeNode)\n        themeNode.insertBefore(\n          keyframeNode,\n          postcss.comment({ text: \"---break---\" })\n        )\n      }\n    },\n  }\n}\n\nfunction updateTailwindConfigAnimationPlugin(\n  tailwindConfig: z.infer<typeof registryItemTailwindSchema>[\"config\"]\n) {\n  return {\n    postcssPlugin: \"update-tailwind-config-animation\",\n    Once(root: Root) {\n      if (!tailwindConfig?.theme?.extend?.animation) {\n        return\n      }\n\n      const themeNode = upsertThemeNode(root)\n      const existingAnimationNodes = themeNode.nodes?.filter(\n        (node): node is postcss.Declaration =>\n          node.type === \"decl\" && node.prop.startsWith(\"--animate-\")\n      )\n\n      const parsedAnimationValue = z\n        .record(z.string(), z.string())\n        .safeParse(tailwindConfig.theme.extend.animation)\n      if (!parsedAnimationValue.success) {\n        return\n      }\n\n      for (const [key, value] of Object.entries(parsedAnimationValue.data)) {\n        const prop = `--animate-${key}`\n        if (\n          existingAnimationNodes?.find(\n            (node): node is postcss.Declaration => node.prop === prop\n          )\n        ) {\n          continue\n        }\n\n        const animationNode = postcss.decl({\n          prop,\n          value,\n          raws: { semicolon: true, between: \": \", before: \"\\n  \" },\n        })\n        themeNode.append(animationNode)\n      }\n    },\n  }\n}\n\nfunction getQuoteType(root: Root): \"single\" | \"double\" {\n  const firstNode = root.nodes[0]\n  const raw = firstNode.toString()\n\n  if (raw.includes(\"'\")) {\n    return \"single\"\n  }\n  return \"double\"\n}\n\nexport function isLocalHSLValue(value: string) {\n  if (\n    value.startsWith(\"hsl\") ||\n    value.startsWith(\"rgb\") ||\n    value.startsWith(\"#\") ||\n    value.startsWith(\"oklch\")\n  ) {\n    return false\n  }\n\n  const chunks = value.split(\" \")\n\n  return (\n    chunks.length === 3 &&\n    chunks.slice(1, 3).every((chunk) => chunk.includes(\"%\"))\n  )\n}\n\nexport function isColorValue(value: string) {\n  return (\n    value.startsWith(\"hsl\") ||\n    value.startsWith(\"rgb\") ||\n    value.startsWith(\"#\") ||\n    value.startsWith(\"oklch\")\n  )\n}\n","import { detect } from \"@antfu/ni\"\n\nexport async function getPackageManager(\n  targetDir: string,\n  { withFallback }: { withFallback?: boolean } = {\n    withFallback: false,\n  }\n): Promise<\"yarn\" | \"pnpm\" | \"bun\" | \"npm\" | \"deno\"> {\n  const packageManager = await detect({ programmatic: true, cwd: targetDir })\n\n  if (packageManager === \"yarn@berry\") return \"yarn\"\n  if (packageManager === \"pnpm@6\") return \"pnpm\"\n  if (packageManager === \"bun\") return \"bun\"\n  if (packageManager === \"deno\") return \"deno\"\n  if (!withFallback) {\n    return packageManager ?? \"npm\"\n  }\n\n  // Fallback to user agent if not detected.\n  const userAgent = process.env.npm_config_user_agent || \"\"\n\n  if (userAgent.startsWith(\"yarn\")) {\n    return \"yarn\"\n  }\n\n  if (userAgent.startsWith(\"pnpm\")) {\n    return \"pnpm\"\n  }\n\n  if (userAgent.startsWith(\"bun\")) {\n    return \"bun\"\n  }\n\n  return \"npm\"\n}\n\nexport async function getPackageRunner(cwd: string) {\n  const packageManager = await getPackageManager(cwd)\n\n  if (packageManager === \"pnpm\") return \"pnpm dlx\"\n\n  if (packageManager === \"bun\") return \"bunx\"\n\n  return \"npx\"\n}\n","import { RegistryItem } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { getPackageInfo } from \"@/src/utils/get-package-info\"\nimport { getPackageManager } from \"@/src/utils/get-package-manager\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { execa } from \"execa\"\nimport prompts from \"prompts\"\n\nexport async function updateDependencies(\n  dependencies: RegistryItem[\"dependencies\"],\n  config: Config,\n  options: {\n    silent?: boolean\n  }\n) {\n  dependencies = Array.from(new Set(dependencies))\n  if (!dependencies?.length) {\n    return\n  }\n\n  options = {\n    silent: false,\n    ...options,\n  }\n\n  const dependenciesSpinner = spinner(`Installing dependencies.`, {\n    silent: options.silent,\n  })?.start()\n  const packageManager = await getPackageManager(config.resolvedPaths.cwd)\n\n  // Offer to use --force or --legacy-peer-deps if using React 19 with npm.\n  let flag = \"\"\n  if (isUsingReact19(config) && packageManager === \"npm\") {\n    if (options.silent) {\n      flag = \"force\"\n    } else {\n      dependenciesSpinner.stopAndPersist()\n      logger.warn(\n        \"\\nIt looks like you are using React 19. \\nSome packages may fail to install due to peer dependency issues in npm (see https://ui.shadcn.com/react-19).\\n\"\n      )\n      const confirmation = await prompts([\n        {\n          type: \"select\",\n          name: \"flag\",\n          message: \"How would you like to proceed?\",\n          choices: [\n            { title: \"Use --force\", value: \"force\" },\n            { title: \"Use --legacy-peer-deps\", value: \"legacy-peer-deps\" },\n          ],\n        },\n      ])\n\n      if (confirmation) {\n        flag = confirmation.flag\n      }\n    }\n  }\n\n  dependenciesSpinner?.start()\n\n  await execa(\n    packageManager,\n    [\n      packageManager === \"npm\" ? \"install\" : \"add\",\n      ...(packageManager === \"npm\" && flag ? [`--${flag}`] : []),\n      ...dependencies,\n    ],\n    {\n      cwd: config.resolvedPaths.cwd,\n    }\n  )\n\n  dependenciesSpinner?.succeed()\n}\n\nfunction isUsingReact19(config: Config) {\n  const packageInfo = getPackageInfo(config.resolvedPaths.cwd)\n\n  if (!packageInfo?.dependencies?.react) {\n    return false\n  }\n\n  return /^(?:\\^|~)?19(?:\\.\\d+)*(?:-.*)?$/.test(packageInfo.dependencies.react)\n}\n","import { existsSync, promises as fs } from \"fs\"\nimport path, { basename } from \"path\"\nimport { getRegistryBaseColor } from \"@/src/registry/api\"\nimport { RegistryItem, registryItemFileSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { ProjectInfo, getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { transform } from \"@/src/utils/transformers\"\nimport { transformCssVars } from \"@/src/utils/transformers/transform-css-vars\"\nimport { transformIcons } from \"@/src/utils/transformers/transform-icons\"\nimport { transformImport } from \"@/src/utils/transformers/transform-import\"\nimport { transformRsc } from \"@/src/utils/transformers/transform-rsc\"\nimport { transformTwPrefixes } from \"@/src/utils/transformers/transform-tw-prefix\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nexport async function updateFiles(\n  files: RegistryItem[\"files\"],\n  config: Config,\n  options: {\n    overwrite?: boolean\n    force?: boolean\n    silent?: boolean\n    rootSpinner?: ReturnType<typeof spinner>\n    isRemote?: boolean\n  }\n) {\n  if (!files?.length) {\n    return {\n      filesCreated: [],\n      filesUpdated: [],\n      filesSkipped: [],\n    }\n  }\n  options = {\n    overwrite: false,\n    force: false,\n    silent: false,\n    isRemote: false,\n    ...options,\n  }\n  const filesCreatedSpinner = spinner(`Updating files.`, {\n    silent: options.silent,\n  })?.start()\n\n  const [projectInfo, baseColor] = await Promise.all([\n    getProjectInfo(config.resolvedPaths.cwd),\n    getRegistryBaseColor(config.tailwind.baseColor),\n  ])\n\n  const filesCreated = []\n  const filesUpdated = []\n  const filesSkipped = []\n\n  for (const file of files) {\n    if (!file.content) {\n      continue\n    }\n\n    let filePath = resolveFilePath(file, config, {\n      isSrcDir: projectInfo?.isSrcDir,\n      framework: projectInfo?.framework.name,\n      commonRoot: findCommonRoot(\n        files.map((f) => f.path),\n        file.path\n      ),\n    })\n\n    if (!filePath) {\n      continue\n    }\n\n    const fileName = basename(file.path)\n    const targetDir = path.dirname(filePath)\n\n    if (!config.tsx) {\n      filePath = filePath.replace(/\\.tsx?$/, (match) =>\n        match === \".tsx\" ? \".jsx\" : \".js\"\n      )\n    }\n\n    const existingFile = existsSync(filePath)\n\n    // Run our transformers.\n    const content = await transform(\n      {\n        filename: file.path,\n        raw: file.content,\n        config,\n        baseColor,\n        transformJsx: !config.tsx,\n        isRemote: options.isRemote,\n      },\n      [\n        transformImport,\n        transformRsc,\n        transformCssVars,\n        transformTwPrefixes,\n        transformIcons,\n      ]\n    )\n\n    // Skip the file if it already exists and the content is the same.\n    if (existingFile) {\n      const existingFileContent = await fs.readFile(filePath, \"utf-8\")\n      const [normalizedExisting, normalizedNew] = await Promise.all([\n        getNormalizedFileContent(existingFileContent),\n        getNormalizedFileContent(content),\n      ])\n      if (normalizedExisting === normalizedNew) {\n        filesSkipped.push(path.relative(config.resolvedPaths.cwd, filePath))\n        continue\n      }\n    }\n\n    if (existingFile && !options.overwrite) {\n      filesCreatedSpinner.stop()\n      if (options.rootSpinner) {\n        options.rootSpinner.stop()\n      }\n      const { overwrite } = await prompts({\n        type: \"confirm\",\n        name: \"overwrite\",\n        message: `The file ${highlighter.info(\n          fileName\n        )} already exists. Would you like to overwrite?`,\n        initial: false,\n      })\n\n      if (!overwrite) {\n        filesSkipped.push(path.relative(config.resolvedPaths.cwd, filePath))\n        if (options.rootSpinner) {\n          options.rootSpinner.start()\n        }\n        continue\n      }\n      filesCreatedSpinner?.start()\n      if (options.rootSpinner) {\n        options.rootSpinner.start()\n      }\n    }\n\n    // Create the target directory if it doesn't exist.\n    if (!existsSync(targetDir)) {\n      await fs.mkdir(targetDir, { recursive: true })\n    }\n\n    await fs.writeFile(filePath, content, \"utf-8\")\n    existingFile\n      ? filesUpdated.push(path.relative(config.resolvedPaths.cwd, filePath))\n      : filesCreated.push(path.relative(config.resolvedPaths.cwd, filePath))\n  }\n\n  const hasUpdatedFiles = filesCreated.length || filesUpdated.length\n  if (!hasUpdatedFiles && !filesSkipped.length) {\n    filesCreatedSpinner?.info(\"No files updated.\")\n  }\n\n  if (filesCreated.length) {\n    filesCreatedSpinner?.succeed(\n      `Created ${filesCreated.length} ${\n        filesCreated.length === 1 ? \"file\" : \"files\"\n      }:`\n    )\n    if (!options.silent) {\n      for (const file of filesCreated) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  } else {\n    filesCreatedSpinner?.stop()\n  }\n\n  if (filesUpdated.length) {\n    spinner(\n      `Updated ${filesUpdated.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }:`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    if (!options.silent) {\n      for (const file of filesUpdated) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  }\n\n  if (filesSkipped.length) {\n    spinner(\n      `Skipped ${filesSkipped.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }: (files might be identical, use --overwrite to overwrite)`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    if (!options.silent) {\n      for (const file of filesSkipped) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  }\n\n  if (!options.silent) {\n    logger.break()\n  }\n\n  return {\n    filesCreated,\n    filesUpdated,\n    filesSkipped,\n  }\n}\n\nexport function resolveFilePath(\n  file: z.infer<typeof registryItemFileSchema>,\n  config: Config,\n  options: {\n    isSrcDir?: boolean\n    commonRoot?: string\n    framework?: ProjectInfo[\"framework\"][\"name\"]\n  }\n) {\n  if (file.target) {\n    if (file.target.startsWith(\"~/\")) {\n      return path.join(config.resolvedPaths.cwd, file.target.replace(\"~/\", \"\"))\n    }\n\n    let target = file.target\n\n    if (file.type === \"registry:page\") {\n      target = resolvePageTarget(target, options.framework)\n      if (!target) {\n        return \"\"\n      }\n    }\n\n    return options.isSrcDir\n      ? path.join(config.resolvedPaths.cwd, \"src\", target.replace(\"src/\", \"\"))\n      : path.join(config.resolvedPaths.cwd, target.replace(\"src/\", \"\"))\n  }\n\n  const targetDir = resolveFileTargetDirectory(file, config)\n\n  const relativePath = resolveNestedFilePath(file.path, targetDir)\n  return path.join(targetDir, relativePath)\n}\n\nfunction resolveFileTargetDirectory(\n  file: z.infer<typeof registryItemFileSchema>,\n  config: Config\n) {\n  if (file.type === \"registry:ui\") {\n    return config.resolvedPaths.ui\n  }\n\n  if (file.type === \"registry:lib\") {\n    return config.resolvedPaths.lib\n  }\n\n  if (file.type === \"registry:block\" || file.type === \"registry:component\") {\n    return config.resolvedPaths.components\n  }\n\n  if (file.type === \"registry:hook\") {\n    return config.resolvedPaths.hooks\n  }\n\n  return config.resolvedPaths.components\n}\n\nexport function findCommonRoot(paths: string[], needle: string): string {\n  // Remove leading slashes for consistent handling\n  const normalizedPaths = paths.map((p) => p.replace(/^\\//, \"\"))\n  const normalizedNeedle = needle.replace(/^\\//, \"\")\n\n  // Get the directory path of the needle by removing the file name\n  const needleDir = normalizedNeedle.split(\"/\").slice(0, -1).join(\"/\")\n\n  // If needle is at root level, return empty string\n  if (!needleDir) {\n    return \"\"\n  }\n\n  // Split the needle directory into segments\n  const needleSegments = needleDir.split(\"/\")\n\n  // Start from the full path and work backwards\n  for (let i = needleSegments.length; i > 0; i--) {\n    const testPath = needleSegments.slice(0, i).join(\"/\")\n    // Check if this is a common root by verifying if any other paths start with it\n    const hasRelatedPaths = normalizedPaths.some(\n      (path) => path !== normalizedNeedle && path.startsWith(testPath + \"/\")\n    )\n    if (hasRelatedPaths) {\n      return \"/\" + testPath // Add leading slash back for the result\n    }\n  }\n\n  // If no common root found with other files, return the parent directory of the needle\n  return \"/\" + needleDir // Add leading slash back for the result\n}\n\nexport function resolveNestedFilePath(\n  filePath: string,\n  targetDir: string\n): string {\n  // Normalize paths by removing leading/trailing slashes\n  const normalizedFilePath = filePath.replace(/^\\/|\\/$/g, \"\")\n  const normalizedTargetDir = targetDir.replace(/^\\/|\\/$/g, \"\")\n\n  // Split paths into segments\n  const fileSegments = normalizedFilePath.split(\"/\")\n  const targetSegments = normalizedTargetDir.split(\"/\")\n\n  // Find the last matching segment from targetDir in filePath\n  const lastTargetSegment = targetSegments[targetSegments.length - 1]\n  const commonDirIndex = fileSegments.findIndex(\n    (segment) => segment === lastTargetSegment\n  )\n\n  if (commonDirIndex === -1) {\n    // Return just the filename if no common directory is found\n    return fileSegments[fileSegments.length - 1]\n  }\n\n  // Return everything after the common directory\n  return fileSegments.slice(commonDirIndex + 1).join(\"/\")\n}\n\nexport async function getNormalizedFileContent(content: string) {\n  return content.replace(/\\r\\n/g, \"\\n\").trim()\n}\n\nexport function resolvePageTarget(\n  target: string,\n  framework?: ProjectInfo[\"framework\"][\"name\"]\n) {\n  if (!framework) {\n    return \"\"\n  }\n\n  if (framework === \"next-app\") {\n    return target\n  }\n\n  if (framework === \"next-pages\") {\n    let result = target.replace(/^app\\//, \"pages/\")\n    result = result.replace(/\\/page(\\.[jt]sx?)$/, \"$1\")\n\n    return result\n  }\n\n  if (framework === \"react-router\") {\n    let result = target.replace(/^app\\//, \"app/routes/\")\n    result = result.replace(/\\/page(\\.[jt]sx?)$/, \"$1\")\n\n    return result\n  }\n\n  if (framework === \"laravel\") {\n    let result = target.replace(/^app\\//, \"resources/js/pages/\")\n    result = result.replace(/\\/page(\\.[jt]sx?)$/, \"$1\")\n\n    return result\n  }\n\n  return \"\"\n}\n","import { promises as fs } from \"fs\"\nimport { tmpdir } from \"os\"\nimport path from \"path\"\nimport { registryBaseColorSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { transformCssVars } from \"@/src/utils/transformers/transform-css-vars\"\nimport { transformIcons } from \"@/src/utils/transformers/transform-icons\"\nimport { transformImport } from \"@/src/utils/transformers/transform-import\"\nimport { transformJsx } from \"@/src/utils/transformers/transform-jsx\"\nimport { transformRsc } from \"@/src/utils/transformers/transform-rsc\"\nimport { Project, ScriptKind, type SourceFile } from \"ts-morph\"\nimport { z } from \"zod\"\n\nimport { transformTwPrefixes } from \"./transform-tw-prefix\"\n\nexport type TransformOpts = {\n  filename: string\n  raw: string\n  config: Config\n  baseColor?: z.infer<typeof registryBaseColorSchema>\n  transformJsx?: boolean\n  isRemote?: boolean\n}\n\nexport type Transformer<Output = SourceFile> = (\n  opts: TransformOpts & {\n    sourceFile: SourceFile\n  }\n) => Promise<Output>\n\nconst project = new Project({\n  compilerOptions: {},\n})\n\nasync function createTempSourceFile(filename: string) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), \"shadcn-\"))\n  return path.join(dir, filename)\n}\n\nexport async function transform(\n  opts: TransformOpts,\n  transformers: Transformer[] = [\n    transformImport,\n    transformRsc,\n    transformCssVars,\n    transformTwPrefixes,\n    transformIcons,\n  ]\n) {\n  const tempFile = await createTempSourceFile(opts.filename)\n  const sourceFile = project.createSourceFile(tempFile, opts.raw, {\n    scriptKind: ScriptKind.TSX,\n  })\n\n  for (const transformer of transformers) {\n    await transformer({ sourceFile, ...opts })\n  }\n\n  if (opts.transformJsx) {\n    return await transformJsx({\n      sourceFile,\n      ...opts,\n    })\n  }\n\n  return sourceFile.getText()\n}\n","import { registryBaseColorSchema } from \"@/src/registry/schema\"\nimport { Transformer } from \"@/src/utils/transformers\"\nimport { ScriptKind, SyntaxKind } from \"ts-morph\"\nimport { z } from \"zod\"\n\nexport const transformCssVars: Transformer = async ({\n  sourceFile,\n  config,\n  baseColor,\n}) => {\n  // No transform if using css variables.\n  if (config.tailwind?.cssVariables || !baseColor?.inlineColors) {\n    return sourceFile\n  }\n\n  // Find jsx attributes with the name className.\n  // const openingElements = sourceFile.getDescendantsOfKind(SyntaxKind.JsxElement)\n  // console.log(openingElements)\n  // const jsxAttributes = sourceFile\n  //   .getDescendantsOfKind(SyntaxKind.JsxAttribute)\n  //   .filter((node) => node.getName() === \"className\")\n\n  // for (const jsxAttribute of jsxAttributes) {\n  //   const value = jsxAttribute.getInitializer()?.getText()\n  //   if (value) {\n  //     const valueWithColorMapping = applyColorMapping(\n  //       value.replace(/\"/g, \"\"),\n  //       baseColor.inlineColors\n  //     )\n  //     jsxAttribute.setInitializer(`\"${valueWithColorMapping}\"`)\n  //   }\n  // }\n  sourceFile.getDescendantsOfKind(SyntaxKind.StringLiteral).forEach((node) => {\n    const value = node.getText()\n    if (value) {\n      const valueWithColorMapping = applyColorMapping(\n        value.replace(/\"/g, \"\"),\n        baseColor.inlineColors\n      )\n      node.replaceWithText(`\"${valueWithColorMapping.trim()}\"`)\n    }\n  })\n\n  return sourceFile\n}\n\n// export default function transformer(file: FileInfo, api: API) {\n//   const j = api.jscodeshift.withParser(\"tsx\")\n\n//   // Replace bg-background with \"bg-white dark:bg-slate-950\"\n//   const $j = j(file.source)\n//   return $j\n//     .find(j.JSXAttribute, {\n//       name: {\n//         name: \"className\",\n//       },\n//     })\n//     .forEach((path) => {\n//       const { node } = path\n//       if (node?.value?.type) {\n//         if (node.value.type === \"StringLiteral\") {\n//           node.value.value = applyColorMapping(node.value.value)\n//           console.log(node.value.value)\n//         }\n\n//         if (\n//           node.value.type === \"JSXExpressionContainer\" &&\n//           node.value.expression.type === \"CallExpression\"\n//         ) {\n//           const callee = node.value.expression.callee\n//           if (callee.type === \"Identifier\" && callee.name === \"cn\") {\n//             node.value.expression.arguments.forEach((arg) => {\n//               if (arg.type === \"StringLiteral\") {\n//                 arg.value = applyColorMapping(arg.value)\n//               }\n\n//               if (\n//                 arg.type === \"LogicalExpression\" &&\n//                 arg.right.type === \"StringLiteral\"\n//               ) {\n//                 arg.right.value = applyColorMapping(arg.right.value)\n//               }\n//             })\n//           }\n//         }\n//       }\n//     })\n//     .toSource()\n// }\n\n// // export function splitClassName(input: string): (string | null)[] {\n// //   const parts = input.split(\":\")\n// //   const classNames = parts.map((part) => {\n// //     const match = part.match(/^\\[?(.+)\\]$/)\n// //     if (match) {\n// //       return match[1]\n// //     } else {\n// //       return null\n// //     }\n// //   })\n\n// //   return classNames\n// // }\n\n// Splits a className into variant-name-alpha.\n// eg. hover:bg-primary-100 -> [hover, bg-primary, 100]\nexport function splitClassName(className: string): (string | null)[] {\n  if (!className.includes(\"/\") && !className.includes(\":\")) {\n    return [null, className, null]\n  }\n\n  const parts: (string | null)[] = []\n  // First we split to find the alpha.\n  let [rest, alpha] = className.split(\"/\")\n\n  // Check if rest has a colon.\n  if (!rest.includes(\":\")) {\n    return [null, rest, alpha]\n  }\n\n  // Next we split the rest by the colon.\n  const split = rest.split(\":\")\n\n  // We take the last item from the split as the name.\n  const name = split.pop()\n\n  // We glue back the rest of the split.\n  const variant = split.join(\":\")\n\n  // Finally we push the variant, name and alpha.\n  parts.push(variant ?? null, name ?? null, alpha ?? null)\n\n  return parts\n}\n\nconst PREFIXES = [\"bg-\", \"text-\", \"border-\", \"ring-offset-\", \"ring-\"]\n\nexport function applyColorMapping(\n  input: string,\n  mapping: z.infer<typeof registryBaseColorSchema>[\"inlineColors\"]\n) {\n  // Handle border classes.\n  if (input.includes(\" border \")) {\n    input = input.replace(\" border \", \" border border-border \")\n  }\n\n  // Build color mappings.\n  const classNames = input.split(\" \")\n  const lightMode = new Set<string>()\n  const darkMode = new Set<string>()\n  for (let className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    const prefix = PREFIXES.find((prefix) => value?.startsWith(prefix))\n    if (!prefix) {\n      if (!lightMode.has(className)) {\n        lightMode.add(className)\n      }\n      continue\n    }\n\n    const needle = value?.replace(prefix, \"\")\n    if (needle && needle in mapping.light) {\n      lightMode.add(\n        [variant, `${prefix}${mapping.light[needle]}`]\n          .filter(Boolean)\n          .join(\":\") + (modifier ? `/${modifier}` : \"\")\n      )\n\n      darkMode.add(\n        [\"dark\", variant, `${prefix}${mapping.dark[needle]}`]\n          .filter(Boolean)\n          .join(\":\") + (modifier ? `/${modifier}` : \"\")\n      )\n      continue\n    }\n\n    if (!lightMode.has(className)) {\n      lightMode.add(className)\n    }\n  }\n\n  return [...Array.from(lightMode), ...Array.from(darkMode)].join(\" \").trim()\n}\n","export const ICON_LIBRARIES = {\n  lucide: {\n    name: \"lucide-react\",\n    package: \"lucide-react\",\n    import: \"lucide-react\",\n  },\n  radix: {\n    name: \"@radix-ui/react-icons\",\n    package: \"@radix-ui/react-icons\",\n    import: \"@radix-ui/react-icons\",\n  },\n}\n","import { getRegistryIcons } from \"@/src/registry/api\"\nimport { ICON_LIBRARIES } from \"@/src/utils/icon-libraries\"\nimport { Transformer } from \"@/src/utils/transformers\"\nimport { SourceFile, SyntaxKind } from \"ts-morph\"\n\n// Lucide is the default icon library in the registry.\nconst SOURCE_LIBRARY = \"lucide\"\n\nexport const transformIcons: Transformer = async ({ sourceFile, config }) => {\n  // No transform if we cannot read the icon library.\n  if (!config.iconLibrary || !(config.iconLibrary in ICON_LIBRARIES)) {\n    return sourceFile\n  }\n\n  const registryIcons = await getRegistryIcons()\n  const sourceLibrary = SOURCE_LIBRARY\n  const targetLibrary = config.iconLibrary\n\n  if (sourceLibrary === targetLibrary) {\n    return sourceFile\n  }\n\n  let targetedIcons: string[] = []\n  for (const importDeclaration of sourceFile.getImportDeclarations() ?? []) {\n    if (\n      importDeclaration.getModuleSpecifier()?.getText() !==\n      `\"${ICON_LIBRARIES[SOURCE_LIBRARY].import}\"`\n    ) {\n      continue\n    }\n\n    for (const specifier of importDeclaration.getNamedImports() ?? []) {\n      const iconName = specifier.getName()\n\n      const targetedIcon = registryIcons[iconName]?.[targetLibrary]\n\n      if (!targetedIcon || targetedIcons.includes(targetedIcon)) {\n        continue\n      }\n\n      targetedIcons.push(targetedIcon)\n\n      // Remove the named import.\n      specifier.remove()\n\n      // Replace with the targeted icon.\n      sourceFile\n        .getDescendantsOfKind(SyntaxKind.JsxSelfClosingElement)\n        .filter((node) => node.getTagNameNode()?.getText() === iconName)\n        .forEach((node) => node.getTagNameNode()?.replaceWithText(targetedIcon))\n    }\n\n    // If the named import is empty, remove the import declaration.\n    if (importDeclaration.getNamedImports()?.length === 0) {\n      importDeclaration.remove()\n    }\n  }\n\n  if (targetedIcons.length > 0) {\n    const iconImportDeclaration = sourceFile.addImportDeclaration({\n      moduleSpecifier:\n        ICON_LIBRARIES[targetLibrary as keyof typeof ICON_LIBRARIES]?.import,\n      namedImports: targetedIcons.map((icon) => ({\n        name: icon,\n      })),\n    })\n\n    if (!_useSemicolon(sourceFile)) {\n      iconImportDeclaration.replaceWithText(\n        iconImportDeclaration.getText().replace(\";\", \"\")\n      )\n    }\n  }\n\n  return sourceFile\n}\n\nfunction _useSemicolon(sourceFile: SourceFile) {\n  return (\n    sourceFile.getImportDeclarations()?.[0]?.getText().endsWith(\";\") ?? false\n  )\n}\n","import { Config } from \"@/src/utils/get-config\"\nimport { Transformer } from \"@/src/utils/transformers\"\n\nexport const transformImport: Transformer = async ({\n  sourceFile,\n  config,\n  isRemote,\n}) => {\n  const workspaceAlias = config.aliases?.utils?.split(\"/\")[0]?.slice(1)\n  const utilsImport = `@${workspaceAlias}/lib/utils`\n\n  const importDeclarations = sourceFile.getImportDeclarations()\n\n  for (const importDeclaration of importDeclarations) {\n    const moduleSpecifier = updateImportAliases(\n      importDeclaration.getModuleSpecifierValue(),\n      config,\n      isRemote\n    )\n\n    importDeclaration.setModuleSpecifier(moduleSpecifier)\n\n    // Replace `import { cn } from \"@/lib/utils\"`\n    if (utilsImport === moduleSpecifier || moduleSpecifier === \"@/lib/utils\") {\n      const namedImports = importDeclaration.getNamedImports()\n      const cnImport = namedImports.find((i) => i.getName() === \"cn\")\n      if (cnImport) {\n        importDeclaration.setModuleSpecifier(\n          utilsImport === moduleSpecifier\n            ? moduleSpecifier.replace(utilsImport, config.aliases.utils)\n            : config.aliases.utils\n        )\n      }\n    }\n  }\n\n  return sourceFile\n}\n\nfunction updateImportAliases(\n  moduleSpecifier: string,\n  config: Config,\n  isRemote: boolean = false\n) {\n  // Not a local import.\n  if (!moduleSpecifier.startsWith(\"@/\") && !isRemote) {\n    return moduleSpecifier\n  }\n\n  // This treats the remote as coming from a faux registry.\n  if (isRemote && moduleSpecifier.startsWith(\"@/\")) {\n    moduleSpecifier = moduleSpecifier.replace(/^@\\//, `@/registry/new-york/`)\n  }\n\n  // Not a registry import.\n  if (!moduleSpecifier.startsWith(\"@/registry/\")) {\n    // We fix the alias and return.\n    const alias = config.aliases.components.split(\"/\")[0]\n    return moduleSpecifier.replace(/^@\\//, `${alias}/`)\n  }\n\n  if (moduleSpecifier.match(/^@\\/registry\\/(.+)\\/ui/)) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/ui/,\n      config.aliases.ui ?? `${config.aliases.components}/ui`\n    )\n  }\n\n  if (\n    config.aliases.components &&\n    moduleSpecifier.match(/^@\\/registry\\/(.+)\\/components/)\n  ) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/components/,\n      config.aliases.components\n    )\n  }\n\n  if (config.aliases.lib && moduleSpecifier.match(/^@\\/registry\\/(.+)\\/lib/)) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/lib/,\n      config.aliases.lib\n    )\n  }\n\n  if (\n    config.aliases.hooks &&\n    moduleSpecifier.match(/^@\\/registry\\/(.+)\\/hooks/)\n  ) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/hooks/,\n      config.aliases.hooks\n    )\n  }\n\n  return moduleSpecifier.replace(\n    /^@\\/registry\\/[^/]+/,\n    config.aliases.components\n  )\n}\n","import { type Transformer } from \"@/src/utils/transformers\"\nimport { transformFromAstSync } from \"@babel/core\"\nimport { ParserOptions, parse } from \"@babel/parser\"\n// @ts-ignore\nimport transformTypescript from \"@babel/plugin-transform-typescript\"\nimport * as recast from \"recast\"\n\n// TODO.\n// I'm using recast for the AST here.\n// Figure out if ts-morph AST is compatible with Babel.\n\n// This is a copy of the babel options from recast/parser.\n// The goal here is to tolerate as much syntax as possible.\n// We want to be able to parse any valid tsx code.\n// See https://github.com/benjamn/recast/blob/master/parsers/_babel_options.ts.\nconst PARSE_OPTIONS: ParserOptions = {\n  sourceType: \"module\",\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: [\n    \"asyncGenerators\",\n    \"bigInt\",\n    \"classPrivateMethods\",\n    \"classPrivateProperties\",\n    \"classProperties\",\n    \"classStaticBlock\",\n    \"decimal\",\n    \"decorators-legacy\",\n    \"doExpressions\",\n    \"dynamicImport\",\n    \"exportDefaultFrom\",\n    \"exportNamespaceFrom\",\n    \"functionBind\",\n    \"functionSent\",\n    \"importAssertions\",\n    \"importMeta\",\n    \"nullishCoalescingOperator\",\n    \"numericSeparator\",\n    \"objectRestSpread\",\n    \"optionalCatchBinding\",\n    \"optionalChaining\",\n    [\n      \"pipelineOperator\",\n      {\n        proposal: \"minimal\",\n      },\n    ],\n    [\n      \"recordAndTuple\",\n      {\n        syntaxType: \"hash\",\n      },\n    ],\n    \"throwExpressions\",\n    \"topLevelAwait\",\n    \"v8intrinsic\",\n    \"typescript\",\n    \"jsx\",\n  ],\n}\n\nexport const transformJsx: Transformer<string> = async ({\n  sourceFile,\n  config,\n}) => {\n  const output = sourceFile.getFullText()\n\n  if (config.tsx) {\n    return output\n  }\n\n  const ast = recast.parse(output, {\n    parser: {\n      parse: (code: string) => {\n        return parse(code, PARSE_OPTIONS)\n      },\n    },\n  })\n\n  const result = transformFromAstSync(ast, output, {\n    cloneInputAst: false,\n    code: false,\n    ast: true,\n    plugins: [transformTypescript],\n    configFile: false,\n  })\n\n  if (!result || !result.ast) {\n    throw new Error(\"Failed to transform JSX\")\n  }\n\n  return recast.print(result.ast).code\n}\n","import { Transformer } from \"@/src/utils/transformers\"\nimport { SyntaxKind } from \"ts-morph\"\n\nconst directiveRegex = /^[\"']use client[\"']$/g\n\nexport const transformRsc: Transformer = async ({ sourceFile, config }) => {\n  if (config.rsc) {\n    return sourceFile\n  }\n\n  // Remove \"use client\" from the top of the file.\n  const first = sourceFile.getFirstChildByKind(SyntaxKind.ExpressionStatement)\n  if (first && directiveRegex.test(first.getText())) {\n    first.remove()\n  }\n\n  return sourceFile\n}\n","import { Transformer } from \"@/src/utils/transformers\"\nimport { SyntaxKind } from \"ts-morph\"\n\nimport { splitClassName } from \"./transform-css-vars\"\n\nexport const transformTwPrefixes: Transformer = async ({\n  sourceFile,\n  config,\n}) => {\n  if (!config.tailwind?.prefix) {\n    return sourceFile\n  }\n\n  // Find the cva function calls.\n  sourceFile\n    .getDescendantsOfKind(SyntaxKind.CallExpression)\n    .filter((node) => node.getExpression().getText() === \"cva\")\n    .forEach((node) => {\n      // cva(base, ...)\n      if (node.getArguments()[0]?.isKind(SyntaxKind.StringLiteral)) {\n        const defaultClassNames = node.getArguments()[0]\n        if (defaultClassNames) {\n          defaultClassNames.replaceWithText(\n            `\"${applyPrefix(\n              defaultClassNames.getText()?.replace(/\"|'/g, \"\"),\n              config.tailwind.prefix\n            )}\"`\n          )\n        }\n      }\n\n      // cva(..., { variants: { ... } })\n      if (node.getArguments()[1]?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n        node\n          .getArguments()[1]\n          ?.getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .find((node) => node.getName() === \"variants\")\n          ?.getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .forEach((node) => {\n            node\n              .getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n              .forEach((node) => {\n                const classNames = node.getInitializerIfKind(\n                  SyntaxKind.StringLiteral\n                )\n                if (classNames) {\n                  classNames?.replaceWithText(\n                    `\"${applyPrefix(\n                      classNames.getText()?.replace(/\"|'/g, \"\"),\n                      config.tailwind.prefix\n                    )}\"`\n                  )\n                }\n              })\n          })\n      }\n    })\n\n  // Find all jsx attributes with the name className.\n  sourceFile.getDescendantsOfKind(SyntaxKind.JsxAttribute).forEach((node) => {\n    if (node.getName() === \"className\") {\n      // className=\"...\"\n      if (node.getInitializer()?.isKind(SyntaxKind.StringLiteral)) {\n        const value = node.getInitializer()\n        if (value) {\n          value.replaceWithText(\n            `\"${applyPrefix(\n              value.getText()?.replace(/\"|'/g, \"\"),\n              config.tailwind.prefix\n            )}\"`\n          )\n        }\n      }\n\n      // className={...}\n      if (node.getInitializer()?.isKind(SyntaxKind.JsxExpression)) {\n        // Check if it's a call to cn().\n        const callExpression = node\n          .getInitializer()\n          ?.getDescendantsOfKind(SyntaxKind.CallExpression)\n          .find((node) => node.getExpression().getText() === \"cn\")\n        if (callExpression) {\n          // Loop through the arguments.\n          callExpression.getArguments().forEach((node) => {\n            if (\n              node.isKind(SyntaxKind.ConditionalExpression) ||\n              node.isKind(SyntaxKind.BinaryExpression)\n            ) {\n              node\n                .getChildrenOfKind(SyntaxKind.StringLiteral)\n                .forEach((node) => {\n                  node.replaceWithText(\n                    `\"${applyPrefix(\n                      node.getText()?.replace(/\"|'/g, \"\"),\n                      config.tailwind.prefix\n                    )}\"`\n                  )\n                })\n            }\n\n            if (node.isKind(SyntaxKind.StringLiteral)) {\n              node.replaceWithText(\n                `\"${applyPrefix(\n                  node.getText()?.replace(/\"|'/g, \"\"),\n                  config.tailwind.prefix\n                )}\"`\n              )\n            }\n          })\n        }\n      }\n    }\n\n    // classNames={...}\n    if (node.getName() === \"classNames\") {\n      if (node.getInitializer()?.isKind(SyntaxKind.JsxExpression)) {\n        node\n          .getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .forEach((node) => {\n            if (node.getInitializer()?.isKind(SyntaxKind.CallExpression)) {\n              const callExpression = node.getInitializerIfKind(\n                SyntaxKind.CallExpression\n              )\n              if (callExpression) {\n                // Loop through the arguments.\n                callExpression.getArguments().forEach((arg) => {\n                  if (arg.isKind(SyntaxKind.ConditionalExpression)) {\n                    arg\n                      .getChildrenOfKind(SyntaxKind.StringLiteral)\n                      .forEach((node) => {\n                        node.replaceWithText(\n                          `\"${applyPrefix(\n                            node.getText()?.replace(/\"|'/g, \"\"),\n                            config.tailwind.prefix\n                          )}\"`\n                        )\n                      })\n                  }\n\n                  if (arg.isKind(SyntaxKind.StringLiteral)) {\n                    arg.replaceWithText(\n                      `\"${applyPrefix(\n                        arg.getText()?.replace(/\"|'/g, \"\"),\n                        config.tailwind.prefix\n                      )}\"`\n                    )\n                  }\n                })\n              }\n            }\n\n            if (node.getInitializer()?.isKind(SyntaxKind.StringLiteral)) {\n              if (node.getName() !== \"variant\") {\n                const classNames = node.getInitializer()\n                if (classNames) {\n                  classNames.replaceWithText(\n                    `\"${applyPrefix(\n                      classNames.getText()?.replace(/\"|'/g, \"\"),\n                      config.tailwind.prefix\n                    )}\"`\n                  )\n                }\n              }\n            }\n          })\n      }\n    }\n  })\n\n  return sourceFile\n}\n\nexport function applyPrefix(input: string, prefix: string = \"\") {\n  const classNames = input.split(\" \")\n  const prefixed: string[] = []\n  for (let className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    if (variant) {\n      modifier\n        ? prefixed.push(`${variant}:${prefix}${value}/${modifier}`)\n        : prefixed.push(`${variant}:${prefix}${value}`)\n    } else {\n      modifier\n        ? prefixed.push(`${prefix}${value}/${modifier}`)\n        : prefixed.push(`${prefix}${value}`)\n    }\n  }\n  return prefixed.join(\" \")\n}\n\nexport function applyPrefixesCss(css: string, prefix: string) {\n  const lines = css.split(\"\\n\")\n  for (let line of lines) {\n    if (line.includes(\"@apply\")) {\n      const originalTWCls = line.replace(\"@apply\", \"\").trim()\n      const prefixedTwCls = applyPrefix(originalTWCls, prefix)\n      css = css.replace(originalTWCls, prefixedTwCls)\n    }\n  }\n  return css\n}\n","import os from \"os\"\nimport path from \"path\"\nimport { initOptionsSchema } from \"@/src/commands/init\"\nimport { fetchRegistry } from \"@/src/registry/api\"\nimport { getPackageManager } from \"@/src/utils/get-package-manager\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { execa } from \"execa\"\nimport fs from \"fs-extra\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nconst MONOREPO_TEMPLATE_URL =\n  \"https://codeload.github.com/shadcn-ui/ui/tar.gz/main\"\n\nexport const TEMPLATES = {\n  next: \"next\",\n  \"next-monorepo\": \"next-monorepo\",\n} as const\n\nexport async function createProject(\n  options: Pick<\n    z.infer<typeof initOptionsSchema>,\n    \"cwd\" | \"force\" | \"srcDir\" | \"components\" | \"template\"\n  >\n) {\n  options = {\n    srcDir: false,\n    ...options,\n  }\n\n  let template: keyof typeof TEMPLATES =\n    options.template && TEMPLATES[options.template as keyof typeof TEMPLATES]\n      ? (options.template as keyof typeof TEMPLATES)\n      : \"next\"\n  let projectName: string =\n    template === TEMPLATES.next ? \"my-app\" : \"my-monorepo\"\n  let nextVersion = \"latest\"\n\n  const isRemoteComponent =\n    options.components?.length === 1 &&\n    !!options.components[0].match(/\\/chat\\/b\\//)\n\n  if (options.components && isRemoteComponent) {\n    try {\n      const [result] = await fetchRegistry(options.components)\n      const { meta } = z\n        .object({\n          meta: z.object({\n            nextVersion: z.string(),\n          }),\n        })\n        .parse(result)\n      nextVersion = meta.nextVersion\n\n      // Force template to next for remote components.\n      template = TEMPLATES.next\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  }\n\n  if (!options.force) {\n    const { type, name } = await prompts([\n      {\n        type: options.template || isRemoteComponent ? null : \"select\",\n        name: \"type\",\n        message: `The path ${highlighter.info(\n          options.cwd\n        )} does not contain a package.json file.\\n  Would you like to start a new project?`,\n        choices: [\n          { title: \"Next.js\", value: \"next\" },\n          { title: \"Next.js (Monorepo)\", value: \"next-monorepo\" },\n        ],\n        initial: 0,\n      },\n      {\n        type: \"text\",\n        name: \"name\",\n        message: \"What is your project named?\",\n        initial: projectName,\n        format: (value: string) => value.trim(),\n        validate: (value: string) =>\n          value.length > 128\n            ? `Name should be less than 128 characters.`\n            : true,\n      },\n    ])\n\n    template = type ?? template\n    projectName = name\n  }\n\n  const packageManager = await getPackageManager(options.cwd, {\n    withFallback: true,\n  })\n\n  const projectPath = `${options.cwd}/${projectName}`\n\n  // Check if path is writable.\n  try {\n    await fs.access(options.cwd, fs.constants.W_OK)\n  } catch (error) {\n    logger.break()\n    logger.error(`The path ${highlighter.info(options.cwd)} is not writable.`)\n    logger.error(\n      `It is likely you do not have write permissions for this folder or the path ${highlighter.info(\n        options.cwd\n      )} does not exist.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n\n  if (fs.existsSync(path.resolve(options.cwd, projectName, \"package.json\"))) {\n    logger.break()\n    logger.error(\n      `A project with the name ${highlighter.info(projectName)} already exists.`\n    )\n    logger.error(`Please choose a different name and try again.`)\n    logger.break()\n    process.exit(1)\n  }\n\n  if (template === TEMPLATES.next) {\n    await createNextProject(projectPath, {\n      version: nextVersion,\n      cwd: options.cwd,\n      packageManager,\n      srcDir: !!options.srcDir,\n    })\n  }\n\n  if (template === TEMPLATES[\"next-monorepo\"]) {\n    await createMonorepoProject(projectPath, {\n      packageManager,\n    })\n  }\n\n  return {\n    projectPath,\n    projectName,\n    template,\n  }\n}\n\nasync function createNextProject(\n  projectPath: string,\n  options: {\n    version: string\n    cwd: string\n    packageManager: string\n    srcDir: boolean\n  }\n) {\n  const createSpinner = spinner(\n    `Creating a new Next.js project. This may take a few minutes.`\n  ).start()\n\n  // Note: pnpm fails here. Fallback to npx with --use-PACKAGE-MANAGER.\n  const args = [\n    \"--tailwind\",\n    \"--eslint\",\n    \"--typescript\",\n    \"--app\",\n    options.srcDir ? \"--src-dir\" : \"--no-src-dir\",\n    \"--no-import-alias\",\n    `--use-${options.packageManager}`,\n  ]\n\n  if (\n    options.version.startsWith(\"15\") ||\n    options.version.startsWith(\"latest\") ||\n    options.version.startsWith(\"canary\")\n  ) {\n    args.push(\"--turbopack\")\n  }\n\n  try {\n    await execa(\n      \"npx\",\n      [`create-next-app@${options.version}`, projectPath, \"--silent\", ...args],\n      {\n        cwd: options.cwd,\n      }\n    )\n  } catch (error) {\n    logger.break()\n    logger.error(\n      `Something went wrong creating a new Next.js project. Please try again.`\n    )\n    process.exit(1)\n  }\n\n  createSpinner?.succeed(\"Creating a new Next.js project.\")\n}\n\nasync function createMonorepoProject(\n  projectPath: string,\n  options: {\n    packageManager: string\n  }\n) {\n  const createSpinner = spinner(\n    `Creating a new Next.js monorepo. This may take a few minutes.`\n  ).start()\n\n  try {\n    // Get the template.\n    const templatePath = path.join(os.tmpdir(), `shadcn-template-${Date.now()}`)\n    await fs.ensureDir(templatePath)\n    const response = await fetch(MONOREPO_TEMPLATE_URL)\n    if (!response.ok) {\n      throw new Error(`Failed to download template: ${response.statusText}`)\n    }\n\n    // Write the tar file\n    const tarPath = path.resolve(templatePath, \"template.tar.gz\")\n    await fs.writeFile(tarPath, Buffer.from(await response.arrayBuffer()))\n    await execa(\"tar\", [\n      \"-xzf\",\n      tarPath,\n      \"-C\",\n      templatePath,\n      \"--strip-components=2\",\n      \"ui-main/templates/monorepo-next\",\n    ])\n    const extractedPath = path.resolve(templatePath, \"monorepo-next\")\n    await fs.move(extractedPath, projectPath)\n    await fs.remove(templatePath)\n\n    // Run install.\n    await execa(options.packageManager, [\"install\"], {\n      cwd: projectPath,\n    })\n\n    // Try git init.\n    const cwd = process.cwd()\n    await execa(\"git\", [\"--version\"], { cwd: projectPath })\n    await execa(\"git\", [\"init\"], { cwd: projectPath })\n    await execa(\"git\", [\"add\", \"-A\"], { cwd: projectPath })\n    await execa(\"git\", [\"commit\", \"-m\", \"Initial commit\"], {\n      cwd: projectPath,\n    })\n    await execa(\"cd\", [cwd])\n\n    createSpinner?.succeed(\"Creating a new Next.js monorepo.\")\n  } catch (error) {\n    createSpinner?.fail(\"Something went wrong creating a new Next.js monorepo.\")\n    handleError(error)\n  }\n}\n","import { promises as fs } from \"fs\"\nimport path from \"path\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport {\n  _createSourceFile,\n  _getQuoteChar,\n} from \"@/src/utils/updaters/update-tailwind-config\"\nimport { ObjectLiteralExpression, SyntaxKind } from \"ts-morph\"\n\nexport async function updateTailwindContent(\n  content: string[],\n  config: Config,\n  options: {\n    silent?: boolean\n  }\n) {\n  if (!content) {\n    return\n  }\n\n  options = {\n    silent: false,\n    ...options,\n  }\n\n  const tailwindFileRelativePath = path.relative(\n    config.resolvedPaths.cwd,\n    config.resolvedPaths.tailwindConfig\n  )\n  const tailwindSpinner = spinner(\n    `Updating ${highlighter.info(tailwindFileRelativePath)}`,\n    {\n      silent: options.silent,\n    }\n  ).start()\n  const raw = await fs.readFile(config.resolvedPaths.tailwindConfig, \"utf8\")\n  const output = await transformTailwindContent(raw, content, config)\n  await fs.writeFile(config.resolvedPaths.tailwindConfig, output, \"utf8\")\n  tailwindSpinner?.succeed()\n}\n\nexport async function transformTailwindContent(\n  input: string,\n  content: string[],\n  config: Config\n) {\n  const sourceFile = await _createSourceFile(input, config)\n  // Find the object with content property.\n  // This is faster than traversing the default export.\n  // TODO: maybe we do need to traverse the default export?\n  const configObject = sourceFile\n    .getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression)\n    .find((node) =>\n      node\n        .getProperties()\n        .some(\n          (property) =>\n            property.isKind(SyntaxKind.PropertyAssignment) &&\n            property.getName() === \"content\"\n        )\n    )\n\n  // We couldn't find the config object, so we return the input as is.\n  if (!configObject) {\n    return input\n  }\n\n  addTailwindConfigContent(configObject, content)\n\n  return sourceFile.getFullText()\n}\n\nasync function addTailwindConfigContent(\n  configObject: ObjectLiteralExpression,\n  content: string[]\n) {\n  const quoteChar = _getQuoteChar(configObject)\n\n  const existingProperty = configObject.getProperty(\"content\")\n\n  if (!existingProperty) {\n    const newProperty = {\n      name: \"content\",\n      initializer: `[${quoteChar}${content.join(\n        `${quoteChar}, ${quoteChar}`\n      )}${quoteChar}]`,\n    }\n    configObject.addPropertyAssignment(newProperty)\n\n    return configObject\n  }\n\n  if (existingProperty.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingProperty.getInitializer()\n\n    // If property is an array, append.\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      for (const contentItem of content) {\n        const newValue = `${quoteChar}${contentItem}${quoteChar}`\n\n        // Check if the array already contains the value.\n        if (\n          initializer\n            .getElements()\n            .map((element) => element.getText())\n            .includes(newValue)\n        ) {\n          continue\n        }\n\n        initializer.addElement(newValue)\n      }\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n","import path from \"path\"\nimport { addOptionsSchema } from \"@/src/commands/add\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getConfig } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightAdd(options: z.infer<typeof addOptionsSchema>) {\n  const errors: Record<string, boolean> = {}\n\n  // Ensure target directory exists.\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (\n    !fs.existsSync(options.cwd) ||\n    !fs.existsSync(path.resolve(options.cwd, \"package.json\"))\n  ) {\n    errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  // Check for existing components.json file.\n  if (!fs.existsSync(path.resolve(options.cwd, \"components.json\"))) {\n    errors[ERRORS.MISSING_CONFIG] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  try {\n    const config = await getConfig(options.cwd)\n\n    return {\n      errors,\n      config: config!,\n    }\n  } catch (error) {\n    logger.break()\n    logger.error(\n      `An invalid ${highlighter.info(\n        \"components.json\"\n      )} file was found at ${highlighter.info(\n        options.cwd\n      )}.\\nBefore you can add components, you must create a valid ${highlighter.info(\n        \"components.json\"\n      )} file by running the ${highlighter.info(\"init\")} command.`\n    )\n    logger.error(\n      `Learn more at ${highlighter.info(\n        \"https://ui.shadcn.com/docs/components-json\"\n      )}.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n}\n","import fs from \"fs/promises\"\nimport path from \"path\"\nimport { getRegistryItem } from \"@/src/registry/api\"\nimport { Config } from \"@/src/utils/get-config\"\n\nexport async function updateAppIndex(component: string, config: Config) {\n  const indexPath = path.join(config.resolvedPaths.cwd, \"app/page.tsx\")\n\n  if (!(await fs.stat(indexPath)).isFile()) {\n    return\n  }\n\n  const registryItem = await getRegistryItem(component, config.style)\n  if (\n    !registryItem?.meta?.importSpecifier ||\n    !registryItem?.meta?.moduleSpecifier\n  ) {\n    return\n  }\n\n  // Overwrite the index file with the new import.\n  const content = `import { ${registryItem?.meta?.importSpecifier} } from \"${registryItem.meta.moduleSpecifier}\"\\n\\nexport default function Page() {\\n  return <${registryItem?.meta?.importSpecifier} />\\n}`\n  await fs.writeFile(indexPath, content, \"utf8\")\n}\n","import * as fs from \"fs/promises\"\nimport * as path from \"path\"\nimport { preFlightBuild } from \"@/src/preflights/preflight-build\"\nimport { registryItemSchema, registrySchema } from \"@/src/registry\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { Command } from \"commander\"\nimport { z } from \"zod\"\n\nexport const buildOptionsSchema = z.object({\n  cwd: z.string(),\n  registryFile: z.string(),\n  outputDir: z.string(),\n})\n\nexport const build = new Command()\n  .name(\"build\")\n  .description(\"build components for a shadcn registry\")\n  .argument(\"[registry]\", \"path to registry.json file\", \"./registry.json\")\n  .option(\n    \"-o, --output <path>\",\n    \"destination directory for json files\",\n    \"./public/r\"\n  )\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (registry: string, opts) => {\n    try {\n      const options = buildOptionsSchema.parse({\n        cwd: path.resolve(opts.cwd),\n        registryFile: registry,\n        outputDir: opts.output,\n      })\n\n      const { resolvePaths } = await preFlightBuild(options)\n      const content = await fs.readFile(resolvePaths.registryFile, \"utf-8\")\n\n      const result = registrySchema.safeParse(JSON.parse(content))\n\n      if (!result.success) {\n        logger.error(\n          `Invalid registry file found at ${highlighter.info(\n            resolvePaths.registryFile\n          )}.`\n        )\n        process.exit(1)\n      }\n\n      const buildSpinner = spinner(\"Building registry...\")\n      for (const registryItem of result.data.items) {\n        if (!registryItem.files) {\n          continue\n        }\n\n        buildSpinner.start(`Building ${registryItem.name}...`)\n\n        // Add the schema to the registry item.\n        registryItem[\"$schema\"] =\n          \"https://ui.shadcn.com/schema/registry-item.json\"\n\n        // Loop through each file in the files array.\n        for (const file of registryItem.files) {\n          file[\"content\"] = await fs.readFile(\n            path.resolve(resolvePaths.cwd, file.path),\n            \"utf-8\"\n          )\n        }\n\n        // Validate the registry item.\n        const result = registryItemSchema.safeParse(registryItem)\n        if (!result.success) {\n          logger.error(\n            `Invalid registry item found for ${highlighter.info(\n              registryItem.name\n            )}.`\n          )\n          continue\n        }\n\n        // Write the registry item to the output directory.\n        await fs.writeFile(\n          path.resolve(resolvePaths.outputDir, `${result.data.name}.json`),\n          JSON.stringify(result.data, null, 2)\n        )\n      }\n\n      buildSpinner.succeed(\"Building registry.\")\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n","import path from \"path\"\nimport { buildOptionsSchema } from \"@/src/commands/build\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightBuild(\n  options: z.infer<typeof buildOptionsSchema>\n) {\n  const errors: Record<string, boolean> = {}\n\n  const resolvePaths = {\n    cwd: options.cwd,\n    registryFile: path.resolve(options.cwd, options.registryFile),\n    outputDir: path.resolve(options.cwd, options.outputDir),\n  }\n\n  // Ensure registry file exists.\n  if (!fs.existsSync(resolvePaths.registryFile)) {\n    errors[ERRORS.BUILD_MISSING_REGISTRY_FILE] = true\n  }\n\n  // Create output directory if it doesn't exist.\n  await fs.mkdir(resolvePaths.outputDir, { recursive: true })\n\n  if (Object.keys(errors).length > 0) {\n    if (errors[ERRORS.BUILD_MISSING_REGISTRY_FILE]) {\n      logger.break()\n      logger.error(\n        `The path ${highlighter.info(\n          resolvePaths.registryFile\n        )} does not exist.`\n      )\n    }\n\n    logger.break()\n    process.exit(1)\n  }\n\n  return {\n    errors,\n    resolvePaths,\n  }\n}\n","import { existsSync, promises as fs } from \"fs\"\nimport path from \"path\"\nimport {\n  fetchTree,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndex,\n} from \"@/src/registry/api\"\nimport { registryIndexSchema } from \"@/src/registry/schema\"\nimport { Config, getConfig } from \"@/src/utils/get-config\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { transform } from \"@/src/utils/transformers\"\nimport { Command } from \"commander\"\nimport { diffLines, type Change } from \"diff\"\nimport { z } from \"zod\"\n\nconst updateOptionsSchema = z.object({\n  component: z.string().optional(),\n  yes: z.boolean(),\n  cwd: z.string(),\n  path: z.string().optional(),\n})\n\nexport const diff = new Command()\n  .name(\"diff\")\n  .description(\"check for updates against the registry\")\n  .argument(\"[component]\", \"the component name\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (name, opts) => {\n    try {\n      const options = updateOptionsSchema.parse({\n        component: name,\n        ...opts,\n      })\n\n      const cwd = path.resolve(options.cwd)\n\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`)\n        process.exit(1)\n      }\n\n      const config = await getConfig(cwd)\n      if (!config) {\n        logger.warn(\n          `Configuration is missing. Please run ${highlighter.success(\n            `init`\n          )} to create a components.json file.`\n        )\n        process.exit(1)\n      }\n\n      const registryIndex = await getRegistryIndex()\n\n      if (!registryIndex) {\n        handleError(new Error(\"Failed to fetch registry index.\"))\n        process.exit(1)\n      }\n\n      if (!options.component) {\n        const targetDir = config.resolvedPaths.components\n\n        // Find all components that exist in the project.\n        const projectComponents = registryIndex.filter((item) => {\n          for (const file of item.files ?? []) {\n            const filePath = path.resolve(\n              targetDir,\n              typeof file === \"string\" ? file : file.path\n            )\n            if (existsSync(filePath)) {\n              return true\n            }\n          }\n\n          return false\n        })\n\n        // Check for updates.\n        const componentsWithUpdates = []\n        for (const component of projectComponents) {\n          const changes = await diffComponent(component, config)\n          if (changes.length) {\n            componentsWithUpdates.push({\n              name: component.name,\n              changes,\n            })\n          }\n        }\n\n        if (!componentsWithUpdates.length) {\n          logger.info(\"No updates found.\")\n          process.exit(0)\n        }\n\n        logger.info(\"The following components have updates available:\")\n        for (const component of componentsWithUpdates) {\n          logger.info(`- ${component.name}`)\n          for (const change of component.changes) {\n            logger.info(`  - ${change.filePath}`)\n          }\n        }\n        logger.break()\n        logger.info(\n          `Run ${highlighter.success(`diff <component>`)} to see the changes.`\n        )\n        process.exit(0)\n      }\n\n      // Show diff for a single component.\n      const component = registryIndex.find(\n        (item) => item.name === options.component\n      )\n\n      if (!component) {\n        logger.error(\n          `The component ${highlighter.success(\n            options.component\n          )} does not exist.`\n        )\n        process.exit(1)\n      }\n\n      const changes = await diffComponent(component, config)\n\n      if (!changes.length) {\n        logger.info(`No updates found for ${options.component}.`)\n        process.exit(0)\n      }\n\n      for (const change of changes) {\n        logger.info(`- ${change.filePath}`)\n        await printDiff(change.patch)\n        logger.info(\"\")\n      }\n    } catch (error) {\n      handleError(error)\n    }\n  })\n\nasync function diffComponent(\n  component: z.infer<typeof registryIndexSchema>[number],\n  config: Config\n) {\n  const payload = await fetchTree(config.style, [component])\n  const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n\n  if (!payload) {\n    return []\n  }\n\n  const changes = []\n\n  for (const item of payload) {\n    const targetDir = await getItemTargetPath(config, item)\n\n    if (!targetDir) {\n      continue\n    }\n\n    for (const file of item.files ?? []) {\n      const filePath = path.resolve(\n        targetDir,\n        typeof file === \"string\" ? file : file.path\n      )\n\n      if (!existsSync(filePath)) {\n        continue\n      }\n\n      const fileContent = await fs.readFile(filePath, \"utf8\")\n\n      if (typeof file === \"string\" || !file.content) {\n        continue\n      }\n\n      const registryContent = await transform({\n        filename: file.path,\n        raw: file.content,\n        config,\n        baseColor,\n      })\n\n      const patch = diffLines(registryContent as string, fileContent)\n      if (patch.length > 1) {\n        changes.push({\n          filePath,\n          patch,\n        })\n      }\n    }\n  }\n\n  return changes\n}\n\nasync function printDiff(diff: Change[]) {\n  diff.forEach((part) => {\n    if (part) {\n      if (part.added) {\n        return process.stdout.write(highlighter.success(part.value))\n      }\n      if (part.removed) {\n        return process.stdout.write(highlighter.error(part.value))\n      }\n\n      return process.stdout.write(part.value)\n    }\n  })\n}\n","import { getConfig } from \"@/src/utils/get-config\"\nimport { getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { logger } from \"@/src/utils/logger\"\nimport { Command } from \"commander\"\n\nexport const info = new Command()\n  .name(\"info\")\n  .description(\"get information about your project\")\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (opts) => {\n    logger.info(\"> project info\")\n    console.log(await getProjectInfo(opts.cwd))\n    logger.break()\n    logger.info(\"> components.json\")\n    console.log(await getConfig(opts.cwd))\n  })\n","import path from \"path\"\nimport { migrateIcons } from \"@/src/migrations/migrate-icons\"\nimport { preFlightMigrate } from \"@/src/preflights/preflight-migrate\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { logger } from \"@/src/utils/logger\"\nimport { Command } from \"commander\"\nimport { z } from \"zod\"\n\nexport const migrations = [\n  {\n    name: \"icons\",\n    description: \"migrate your ui components to a different icon library.\",\n  },\n] as const\n\nexport const migrateOptionsSchema = z.object({\n  cwd: z.string(),\n  list: z.boolean(),\n  migration: z\n    .string()\n    .refine(\n      (value) =>\n        value && migrations.some((migration) => migration.name === value),\n      {\n        message:\n          \"You must specify a valid migration. Run `shadcn migrate --list` to see available migrations.\",\n      }\n    )\n    .optional(),\n})\n\nexport const migrate = new Command()\n  .name(\"migrate\")\n  .description(\"run a migration.\")\n  .argument(\"[migration]\", \"the migration to run.\")\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-l, --list\", \"list all migrations.\", false)\n  .action(async (migration, opts) => {\n    try {\n      const options = migrateOptionsSchema.parse({\n        cwd: path.resolve(opts.cwd),\n        migration,\n        list: opts.list,\n      })\n\n      if (options.list || !options.migration) {\n        logger.info(\"Available migrations:\")\n        for (const migration of migrations) {\n          logger.info(`- ${migration.name}: ${migration.description}`)\n        }\n        return\n      }\n\n      if (!options.migration) {\n        throw new Error(\n          \"You must specify a migration. Run `shadcn migrate --list` to see available migrations.\"\n        )\n      }\n\n      let { errors, config } = await preFlightMigrate(options)\n\n      if (\n        errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] ||\n        errors[ERRORS.MISSING_CONFIG]\n      ) {\n        throw new Error(\n          \"No `components.json` file found. Ensure you are at the root of your project.\"\n        )\n      }\n\n      if (!config) {\n        throw new Error(\n          \"Something went wrong reading your `components.json` file. Please ensure you have a valid `components.json` file.\"\n        )\n      }\n\n      if (options.migration === \"icons\") {\n        await migrateIcons(config)\n      }\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n","import { randomBytes } from \"crypto\"\nimport { promises as fs } from \"fs\"\nimport { tmpdir } from \"os\"\nimport path from \"path\"\nimport { getRegistryIcons } from \"@/src/registry/api\"\nimport { iconsSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { ICON_LIBRARIES } from \"@/src/utils/icon-libraries\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { updateDependencies } from \"@/src/utils/updaters/update-dependencies\"\nimport fg from \"fast-glob\"\nimport prompts from \"prompts\"\nimport { Project, ScriptKind, SyntaxKind } from \"ts-morph\"\nimport { z } from \"zod\"\n\nexport async function migrateIcons(config: Config) {\n  if (!config.resolvedPaths.ui) {\n    throw new Error(\n      \"We could not find a valid `ui` path in your `components.json` file. Please ensure you have a valid `ui` path in your `components.json` file.\"\n    )\n  }\n\n  const uiPath = config.resolvedPaths.ui\n  const [files, registryIcons] = await Promise.all([\n    fg(\"**/*.{js,ts,jsx,tsx}\", {\n      cwd: uiPath,\n    }),\n    getRegistryIcons(),\n  ])\n\n  if (Object.keys(registryIcons).length === 0) {\n    throw new Error(\"Something went wrong fetching the registry icons.\")\n  }\n\n  const libraryChoices = Object.entries(ICON_LIBRARIES).map(\n    ([name, iconLibrary]) => ({\n      title: iconLibrary.name,\n      value: name,\n    })\n  )\n\n  const migrateOptions = await prompts([\n    {\n      type: \"select\",\n      name: \"sourceLibrary\",\n      message: `Which icon library would you like to ${highlighter.info(\n        \"migrate from\"\n      )}?`,\n      choices: libraryChoices,\n    },\n    {\n      type: \"select\",\n      name: \"targetLibrary\",\n      message: `Which icon library would you like to ${highlighter.info(\n        \"migrate to\"\n      )}?`,\n      choices: libraryChoices,\n    },\n  ])\n\n  if (migrateOptions.sourceLibrary === migrateOptions.targetLibrary) {\n    throw new Error(\n      \"You cannot migrate to the same icon library. Please choose a different icon library.\"\n    )\n  }\n\n  if (\n    !(\n      migrateOptions.sourceLibrary in ICON_LIBRARIES &&\n      migrateOptions.targetLibrary in ICON_LIBRARIES\n    )\n  ) {\n    throw new Error(\"Invalid icon library. Please choose a valid icon library.\")\n  }\n\n  const sourceLibrary =\n    ICON_LIBRARIES[migrateOptions.sourceLibrary as keyof typeof ICON_LIBRARIES]\n  const targetLibrary =\n    ICON_LIBRARIES[migrateOptions.targetLibrary as keyof typeof ICON_LIBRARIES]\n  const { confirm } = await prompts({\n    type: \"confirm\",\n    name: \"confirm\",\n    initial: true,\n    message: `We will migrate ${highlighter.info(\n      files.length\n    )} files in ${highlighter.info(\n      `./${path.relative(config.resolvedPaths.cwd, uiPath)}`\n    )} from ${highlighter.info(sourceLibrary.name)} to ${highlighter.info(\n      targetLibrary.name\n    )}. Continue?`,\n  })\n\n  if (!confirm) {\n    logger.info(\"Migration cancelled.\")\n    process.exit(0)\n  }\n\n  if (targetLibrary.package) {\n    await updateDependencies([targetLibrary.package], config, {\n      silent: false,\n    })\n  }\n\n  const migrationSpinner = spinner(`Migrating icons...`)?.start()\n\n  await Promise.all(\n    files.map(async (file) => {\n      migrationSpinner.text = `Migrating ${file}...`\n\n      const filePath = path.join(uiPath, file)\n      const fileContent = await fs.readFile(filePath, \"utf-8\")\n\n      const content = await migrateIconsFile(\n        fileContent,\n        migrateOptions.sourceLibrary,\n        migrateOptions.targetLibrary,\n        registryIcons\n      )\n\n      await fs.writeFile(filePath, content)\n    })\n  )\n\n  migrationSpinner.succeed(\"Migration complete.\")\n}\n\nexport async function migrateIconsFile(\n  content: string,\n  sourceLibrary: keyof typeof ICON_LIBRARIES,\n  targetLibrary: keyof typeof ICON_LIBRARIES,\n  iconsMapping: z.infer<typeof iconsSchema>\n) {\n  const sourceLibraryImport = ICON_LIBRARIES[sourceLibrary]?.import\n  const targetLibraryImport = ICON_LIBRARIES[targetLibrary]?.import\n\n  const dir = await fs.mkdtemp(path.join(tmpdir(), \"shadcn-\"))\n  const project = new Project({\n    compilerOptions: {},\n  })\n\n  const tempFile = path.join(\n    dir,\n    `shadcn-icons-${randomBytes(4).toString(\"hex\")}.tsx`\n  )\n  const sourceFile = project.createSourceFile(tempFile, content, {\n    scriptKind: ScriptKind.TSX,\n  })\n\n  // Find all sourceLibrary imports.\n  let targetedIcons: string[] = []\n  for (const importDeclaration of sourceFile.getImportDeclarations() ?? []) {\n    if (\n      importDeclaration.getModuleSpecifier()?.getText() !==\n      `\"${sourceLibraryImport}\"`\n    ) {\n      continue\n    }\n\n    for (const specifier of importDeclaration.getNamedImports() ?? []) {\n      const iconName = specifier.getName()\n\n      // TODO: this is O(n^2) but okay for now.\n      const targetedIcon = Object.values(iconsMapping).find(\n        (icon) => icon[sourceLibrary] === iconName\n      )?.[targetLibrary]\n\n      if (!targetedIcon || targetedIcons.includes(targetedIcon)) {\n        continue\n      }\n\n      targetedIcons.push(targetedIcon)\n\n      // Remove the named import.\n      specifier.remove()\n\n      // Replace with the targeted icon.\n      sourceFile\n        .getDescendantsOfKind(SyntaxKind.JsxSelfClosingElement)\n        .filter((node) => node.getTagNameNode()?.getText() === iconName)\n        .forEach((node) => node.getTagNameNode()?.replaceWithText(targetedIcon))\n    }\n\n    // If the named import is empty, remove the import declaration.\n    if (importDeclaration.getNamedImports()?.length === 0) {\n      importDeclaration.remove()\n    }\n  }\n\n  if (targetedIcons.length > 0) {\n    sourceFile.addImportDeclaration({\n      moduleSpecifier: targetLibraryImport,\n      namedImports: targetedIcons.map((icon) => ({\n        name: icon,\n      })),\n    })\n  }\n\n  return await sourceFile.getText()\n}\n","import path from \"path\"\nimport { addOptionsSchema } from \"@/src/commands/add\"\nimport { migrateOptionsSchema } from \"@/src/commands/migrate\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getConfig } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightMigrate(\n  options: z.infer<typeof migrateOptionsSchema>\n) {\n  const errors: Record<string, boolean> = {}\n\n  // Ensure target directory exists.\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (\n    !fs.existsSync(options.cwd) ||\n    !fs.existsSync(path.resolve(options.cwd, \"package.json\"))\n  ) {\n    errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  // Check for existing components.json file.\n  if (!fs.existsSync(path.resolve(options.cwd, \"components.json\"))) {\n    errors[ERRORS.MISSING_CONFIG] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  try {\n    const config = await getConfig(options.cwd)\n\n    return {\n      errors,\n      config: config!,\n    }\n  } catch (error) {\n    logger.break()\n    logger.error(\n      `An invalid ${highlighter.info(\n        \"components.json\"\n      )} file was found at ${highlighter.info(\n        options.cwd\n      )}.\\nBefore you can run a migration, you must create a valid ${highlighter.info(\n        \"components.json\"\n      )} file by running the ${highlighter.info(\"init\")} command.`\n    )\n    logger.error(\n      `Learn more at ${highlighter.info(\n        \"https://ui.shadcn.com/docs/components-json\"\n      )}.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n}\n","#!/usr/bin/env node\nimport { add } from \"@/src/commands/add\"\nimport { build } from \"@/src/commands/build\"\nimport { diff } from \"@/src/commands/diff\"\nimport { info } from \"@/src/commands/info\"\nimport { init } from \"@/src/commands/init\"\nimport { migrate } from \"@/src/commands/migrate\"\nimport { Command } from \"commander\"\n\nimport packageJson from \"../package.json\"\n\nprocess.on(\"SIGINT\", () => process.exit(0))\nprocess.on(\"SIGTERM\", () => process.exit(0))\n\nasync function main() {\n  const program = new Command()\n    .name(\"shadcn\")\n    .description(\"add components and dependencies to your project\")\n    .version(\n      packageJson.version || \"1.0.0\",\n      \"-v, --version\",\n      \"display the version number\"\n    )\n\n  program\n    .addCommand(init)\n    .addCommand(add)\n    .addCommand(diff)\n    .addCommand(migrate)\n    .addCommand(info)\n    .addCommand(build)\n\n  program.parse()\n}\n\nmain()\n\nexport * from \"./registry/api\"\n","{\n  \"name\": \"shadcn\",\n  \"version\": \"2.4.0-canary.17\",\n  \"description\": \"Add components to your apps.\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"license\": \"MIT\",\n  \"author\": {\n    \"name\": \"shadcn\",\n    \"url\": \"https://twitter.com/shadcn\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/shadcn/ui.git\",\n    \"directory\": \"packages/shadcn\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"keywords\": [\n    \"components\",\n    \"ui\",\n    \"tailwind\",\n    \"radix-ui\",\n    \"shadcn\"\n  ],\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.js\"\n    },\n    \"./registry\": {\n      \"types\": \"./dist/registry/index.d.ts\",\n      \"default\": \"./dist/registry/index.js\"\n    }\n  },\n  \"bin\": \"./dist/index.js\",\n  \"scripts\": {\n    \"dev\": \"tsup --watch\",\n    \"build\": \"tsup\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"clean\": \"rimraf dist && rimraf components\",\n    \"start:dev\": \"cross-env REGISTRY_URL=http://localhost:3333/r node dist/index.js\",\n    \"start:prod\": \"cross-env REGISTRY_URL=https://ui.shadcn.com/r node dist/index.js\",\n    \"start\": \"node dist/index.js\",\n    \"format:write\": \"prettier --write \\\"**/*.{ts,tsx,mdx}\\\" --cache\",\n    \"format:check\": \"prettier --check \\\"**/*.{ts,tsx,mdx}\\\" --cache\",\n    \"release\": \"changeset version\",\n    \"pub:beta\": \"pnpm build && pnpm publish --no-git-checks --access public --tag beta\",\n    \"pub:next\": \"pnpm build && pnpm publish --no-git-checks --access public --tag next\",\n    \"pub:release\": \"pnpm build && pnpm publish --access public\",\n    \"test\": \"vitest run\",\n    \"test:dev\": \"REGISTRY_URL=http://localhost:3333/r vitest run\"\n  },\n  \"dependencies\": {\n    \"@antfu/ni\": \"^23.2.0\",\n    \"@babel/core\": \"^7.22.1\",\n    \"@babel/parser\": \"^7.22.6\",\n    \"@babel/plugin-transform-typescript\": \"^7.22.5\",\n    \"commander\": \"^10.0.0\",\n    \"cosmiconfig\": \"^8.1.3\",\n    \"deepmerge\": \"^4.3.1\",\n    \"diff\": \"^5.1.0\",\n    \"execa\": \"^7.0.0\",\n    \"fast-glob\": \"^3.3.2\",\n    \"fs-extra\": \"^11.1.0\",\n    \"https-proxy-agent\": \"^6.2.0\",\n    \"kleur\": \"^4.1.5\",\n    \"msw\": \"^2.7.1\",\n    \"node-fetch\": \"^3.3.0\",\n    \"ora\": \"^6.1.2\",\n    \"postcss\": \"^8.4.24\",\n    \"prompts\": \"^2.4.2\",\n    \"recast\": \"^0.23.2\",\n    \"stringify-object\": \"^5.0.0\",\n    \"ts-morph\": \"^18.0.0\",\n    \"tsconfig-paths\": \"^4.2.0\",\n    \"zod\": \"^3.20.2\"\n  },\n  \"devDependencies\": {\n    \"@types/babel__core\": \"^7.20.1\",\n    \"@types/diff\": \"^5.0.3\",\n    \"@types/fs-extra\": \"^11.0.1\",\n    \"@types/prompts\": \"^2.4.2\",\n    \"@types/stringify-object\": \"^4.0.5\",\n    \"rimraf\": \"^6.0.1\",\n    \"tsup\": \"^6.6.3\",\n    \"type-fest\": \"^3.8.0\",\n    \"typescript\": \"^4.9.3\"\n  }\n}\n"]}